{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/color_picker/color_picker.ts","src/controls.ts","src/dependencies/translate.ts","src/image_slider/image_slider.ts","src/image_slider/image_slider_service.ts","src/image_slider/slider_button.ts","src/image_slider/slider_indicator.ts","src/markdown/markdown.ts","src/popover/popover.ts","src/popover/popover_service.ts","src/progress/routing_progress.ts","src/toast/toasts.ts","temp/pip-webui-controls-html.min.js"],"names":[],"mappings":"AAAA;;;ACaA,IAAM,cAAc,GAAG,CAAC,QAAQ,EAAE,YAAY,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;AAE9F;IAYI,+BACI,MAAiB,EACjB,QAAQ,EACR,MAAM,EACN,QAAQ;QACR,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QAEtB,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,IAAI,EAAE,CAAC;QAChC,IAAI,CAAC,MAAM,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC;YAC7B,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,MAAM,KAAK,CAAC,GAAG,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC;QAC3H,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC;QACvD,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACnE,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAChE,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,YAAY,CAAC,IAAI,KAAK,CAAC;IAC1D,CAAC;IAEM,0CAAU,GAAjB,UAAkB,OAAY;QAC1B,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC;YAClG,OAAO,CAAC,QAAQ,CAAC,CAAC,YAAY,GAAG,cAAc,CAAC;QACpD,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC,YAAY,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC/E,CAAC;IAEM,wCAAQ,GAAf;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAED,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAAA,CAAC;IAEK,2CAAW,GAAlB,UAAmB,KAAa;QAAhC,iBAaC;QAZG,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC;QACX,CAAC;QACD,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;QAC/B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACxD,IAAI,CAAC,SAAS,CAAC;YACX,KAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;QAC1B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,WAAW,EAAE,CAAC;QACvB,CAAC;IACL,CAAC;IAAA,CAAC;IAEK,+CAAe,GAAtB,UAAuB,KAAK;QACxB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IAAA,CAAC;IAEN,4BAAC;AAAD,CA9DA,AA8DC,IAAA;AA9DY,sDAAqB;AAgElC,IAAM,cAAc,GAAG;IACnB,QAAQ,EAAE;QACN,UAAU,EAAE,cAAc;QAC1B,MAAM,EAAE,YAAY;QACpB,YAAY,EAAE,UAAU;QACxB,WAAW,EAAE,YAAY;KAC5B;IACD,WAAW,EAAE,gCAAgC;IAC7C,UAAU,EAAE,qBAAqB;IACjC,YAAY,EAAE,IAAI;CACrB,CAAA;AAED,OAAO;KACF,MAAM,CAAC,gBAAgB,EAAE,CAAC,uBAAuB,CAAC,CAAC;KACnD,SAAS,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC;;;AC3FjD,CAAC;IACG,YAAY,CAAC;IAEb,OAAO,CAAC,MAAM,CAAC,aAAa,EAAE;QAC1B,aAAa;QACb,gBAAgB;QAChB,oBAAoB;QACpB,YAAY;QACZ,gBAAgB;QAChB,WAAW;QACX,uBAAuB;KAC1B,CAAC,CAAC;AAEP,CAAC,CAAC,EAAE,CAAC;;;ACbL,CAAC;IACG,YAAY,CAAC;IAEb,IAAI,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,uBAAuB,EAAE,EAAE,CAAC,CAAC;IAE7D,UAAU,CAAC,MAAM,CAAC,WAAW,EAAE,UAAU,SAAS;QAC9C,IAAI,YAAY,GAAG,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC;cAC1C,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC;QAE3C,MAAM,CAAC,UAAU,GAAG;YAChB,MAAM,CAAC,YAAY,GAAI,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC;QACpE,CAAC,CAAA;IACL,CAAC,CAAC,CAAC;AAEP,CAAC,CAAC,EAAE,CAAC;;;ACdL;IAoBI,kCACI,MAAiB,EACjB,QAAQ,EACR,MAAM,EACN,MAAwB,EACxB,QAAiC,EACjC,SAAmC,EACnC,cAAc;QAPlB,iBA4CC;QAzDO,WAAM,GAAW,CAAC,CAAC;QAInB,qBAAgB,GAAG,IAAI,CAAC;QAKzB,eAAU,GAAW,CAAC,CAAC;QAa1B,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC,CAAC;QAC/C,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC;QACpC,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC;QAC5C,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,MAAM,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC;QAExC,QAAQ,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC;QACtC,QAAQ,CAAC,QAAQ,CAAC,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;QAEjD,IAAI,CAAC,QAAQ,EAAE,CAAC;QAEhB,QAAQ,CAAC;YACL,KAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;YACrD,EAAE,CAAC,CAAC,KAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC1B,CAAC,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YAC5C,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,QAAQ,CAAC;YACzB,cAAc,CAAC,OAAO,CAAC,KAAI,CAAC,KAAK,EAAE,KAAI,CAAC,OAAO,EAAE,KAAI,CAAC,MAAM,EAAE,KAAI,CAAC,SAAS,EAAE,KAAI,CAAC,UAAU,CAAC,CAAC;YAC/F,KAAI,CAAC,MAAM,GAAG,KAAI,CAAC,SAAS,CAAC;YAC7B,KAAI,CAAC,QAAQ,EAAE,CAAC;QACpB,CAAC,EAAE,GAAG,CAAC,CAAC;QAER,EAAE,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;YAAC,cAAc,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAA;QAAC,CAAC;QAEnE,QAAQ,CAAC,EAAE,CAAC,UAAU,EAAE;YACpB,KAAI,CAAC,YAAY,EAAE,CAAC;YACpB,cAAc,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IAEP,CAAC;IAEM,4CAAS,GAAhB;QACI,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAC/E,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;QACzB,IAAI,CAAC,UAAU,EAAE,CAAC;IACtB,CAAC;IAEM,4CAAS,GAAhB;QACI,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QACjF,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;QACzB,IAAI,CAAC,UAAU,EAAE,CAAC;IACtB,CAAC;IAEO,iDAAc,GAAtB,UAAuB,SAAiB;QACpC,EAAE,CAAC,CAAC,SAAS,KAAK,IAAI,CAAC,MAAM,IAAI,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACnE,MAAM,CAAC;QACX,CAAC;QAED,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,UAAU,GAAG,SAAS,GAAG,IAAI,CAAC,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC;QAC5D,IAAI,CAAC,UAAU,EAAE,CAAC;IACtB,CAAC;IAEO,2CAAQ,GAAhB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC;YAAC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC;IACnE,CAAC;IAEO,gDAAa,GAArB;QAAA,iBAMC;QALG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC;YACjC,KAAI,CAAC,SAAS,GAAG,KAAI,CAAC,MAAM,GAAG,CAAC,KAAK,KAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,GAAG,KAAI,CAAC,MAAM,GAAG,CAAC,CAAC;YAC/E,KAAI,CAAC,UAAU,GAAG,MAAM,CAAC;YACzB,KAAI,CAAC,UAAU,EAAE,CAAC;QACtB,CAAC,EAAE,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAChD,CAAC;IAEO,+CAAY,GAApB;QACI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC/C,CAAC;IAEO,kDAAe,GAAvB;QACI,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IACL,+BAAC;AAAD,CA/GA,AA+GC,IAAA;AAED,CAAC;IAEG;QACI,MAAM,CAAC;YACH,KAAK,EAAE;gBACH,WAAW,EAAE,gBAAgB;gBAC7B,IAAI,EAAE,mBAAmB;gBACzB,QAAQ,EAAE,uBAAuB;aACpC;YACD,gBAAgB,EAAE,IAAI;YACtB,UAAU,EAAE,wBAAwB;YACpC,YAAY,EAAE,IAAI;SACrB,CAAC;IACN,CAAC;IAGD,OAAO;SACF,MAAM,CAAC,gBAAgB,EAAE,CAAC,iBAAiB,EAAE,oBAAoB,EAAE,wBAAwB,CAAC,CAAC;SAC7F,SAAS,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC;AACrD,CAAC,CAAC,EAAE,CAAC;;;AC3HL;IAKI,4BAAY,QAAiC;QAHrC,uBAAkB,GAAW,GAAG,CAAC;QACjC,aAAQ,GAAG,EAAE,CAAC;QAGlB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC9B,CAAC;IAEM,2CAAc,GAArB,UAAsB,QAAgB,EAAE,WAAW;QAC/C,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC;IAC1C,CAAC;IAEM,yCAAY,GAAnB,UAAoB,QAAgB;QAChC,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC;IAEM,2CAAc,GAArB,UAAsB,QAAgB;QAClC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC;IAEM,yCAAY,GAAnB,UAAoB,SAAS,EAAE,SAAS;QACpC,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAE/B,IAAI,CAAC,SAAS,CAAC;YACX,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;YAC5E,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QAC3D,CAAC,EAAE,GAAG,CAAC,CAAC;IACZ,CAAC;IAEM,yCAAY,GAAnB,UAAoB,SAAS,EAAE,SAAS;QACpC,IAAI,CAAC,SAAS,CAAC;YACX,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YACpD,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QAChF,CAAC,EAAE,GAAG,CAAC,CAAC;IACZ,CAAC;IAEM,oCAAO,GAAd,UAAe,IAAY,EAAE,MAAa,EAAE,QAAgB,EAAE,SAAiB,EAAE,SAAiB;QAC9F,IAAI,SAAS,GAAG,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAC/B,UAAU,GAAW,SAAS,EAC9B,SAAS,GAAG,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;QAEtC,EAAE,CAAC,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC,CAAC;YACtB,CAAC,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;YAElF,EAAE,CAAC,CAAC,SAAS,IAAI,CAAC,SAAS,KAAK,MAAM,IAAI,SAAS,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC9D,EAAE,CAAC,CAAC,SAAS,KAAK,MAAM,CAAC,CAAC,CAAC;oBACvB,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;gBAC5C,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;gBAC5C,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,EAAE,CAAC,CAAC,SAAS,IAAI,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC;oBACpC,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;gBAC5C,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;gBAC5C,CAAC;YACL,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;YACvD,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QACxD,CAAC;IACL,CAAC;IAEL,yBAAC;AAAD,CAhEA,AAgEC,IAAA;AAGD,CAAC;IACG,YAAY,CAAC;IACb,OAAO;SACF,MAAM,CAAC,wBAAwB,EAAE,EAAE,CAAC;SACpC,OAAO,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,CAAC;AACvD,CAAC,CAAC,EAAE,CAAC;;;ACjFL,CAAC;IACG,YAAY,CAAC;IAEb,IAAI,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;IAEvD,UAAU,CAAC,SAAS,CAAC,iBAAiB,EAClC;QACI,MAAM,CAAC;YACH,KAAK,EAAE,EAAE;YACT,UAAU,EAAE,UAAU,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,cAAc;gBAClE,IAAI,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC,EAC3C,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,CAAC;gBAElD,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE;oBACjB,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;wBACrB,MAAM,CAAC;oBACX,CAAC;oBAED,cAAc,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,OAAO,CAAC,EAAE,CAAC;gBACjE,CAAC,CAAC,CAAC;YACP,CAAC;SACJ,CAAC;IACN,CAAC,CACJ,CAAC;AAEN,CAAC,CAAC,EAAE,CAAC;;;ACzBL,CAAC;IACG,YAAY,CAAC;IAEb,IAAI,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,oBAAoB,EAAE,EAAE,CAAC,CAAC;IAE1D,UAAU,CAAC,SAAS,CAAC,oBAAoB,EACrC;QACI,MAAM,CAAC;YACH,KAAK,EAAE,KAAK;YACZ,UAAU,EAAE,UAAC,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,cAAc;gBACzD,IAAI,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,EAC7C,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC;gBAEhD,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;gBAClC,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAG;oBAClB,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,OAAO,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;wBACtC,MAAM,CAAC;oBACX,CAAC;oBACD,cAAc,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;gBACvE,CAAC,CAAC,CAAC;YACP,CAAC;SACJ,CAAC;IACN,CAAC,CACJ,CAAC;AAEN,CAAC,CAAC,EAAE,CAAC;;;ACvBL,gBAAgB,SAAS;IACrB,IAAM,YAAY,GAAG,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC;IAE1F,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;QACf,YAAY,CAAC,eAAe,CAAC,IAAI,EAAE;YAC/B,sBAAsB,EAAE,cAAc;YACtC,WAAW,EAAE,WAAW;YACxB,WAAW,EAAE,WAAW;YACxB,UAAU,EAAE,UAAU;YACtB,UAAU,EAAE,UAAU;YACtB,MAAM,EAAE,MAAM;SACjB,CAAC,CAAC;QACH,YAAY,CAAC,eAAe,CAAC,IAAI,EAAE;YAC/B,sBAAsB,EAAE,WAAW;YACnC,WAAW,EAAE,QAAQ;YACrB,WAAW,EAAE,WAAW;YACxB,UAAU,EAAE,aAAa;YACzB,UAAU,EAAE,iBAAiB;YAC7B,MAAM,EAAE,OAAO;SAClB,CAAC,CAAC;IACP,CAAC;AACL,CAAC;AAED;IAYI,4BACI,MAAsB,EACtB,MAA6B,EAC7B,MAAM,EACN,QAAQ,EACR,SAAS;QAET,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC;QAC1F,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC;QACrC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC;QACzC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC;QACvC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC;IAC7C,CAAC;IAEM,sCAAS,GAAhB;QAEI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAE1B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE;YACjC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;gBAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;QAGH,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;IAE5C,CAAC;IAEM,uCAAU,GAAjB,UAAkB,OAAY;QAC1B,IAAM,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC;QAE7C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACf,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,OAAO,CAAC,CAAC,CAAC;gBACzB,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;gBACrB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC9B,CAAC;QACL,CAAC;IACL,CAAC;IAEO,gDAAmB,GAA3B,UAA4B,KAAK;QAC7B,IAAI,YAAY,GAAG,EAAE,EACjB,WAAW,GAAG,EAAE,CAAC;QAErB,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,MAAM;YAC1B,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC,CAAC;gBACxC,EAAE,CAAC,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;oBAClD,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,sBAAsB,CAAC,CAAC;gBACxE,CAAC;gBAED,EAAE,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBACvC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;oBAC9B,YAAY,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,GAAG,GAAG,CAAC;oBACpD,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;wBACnB,YAAY,IAAI,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAClE,CAAC;YACL,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,YAAY,CAAC;IACxB,CAAC;IAEO,qCAAQ,GAAhB,UAAiB,KAAK;QAClB,IAAI,UAAU,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,CAAC;QAEhD,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACnB,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,IAAS;gBACnC,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC;YAC7C,CAAC,CAAC,CAAC;YAEH,UAAU,GAAG,GAAG,GAAG,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;QAClE,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,UAAU,GAAG,KAAK,CAAC;QACvB,CAAC;QAED,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACjE,SAAS,GAAG,SAAS,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;QAC7D,OAAO,GAAG;YACN,GAAG,EAAE,IAAI;YACT,MAAM,EAAE,IAAI;YACZ,MAAM,EAAE,IAAI;YACZ,QAAQ,EAAE,IAAI;YACd,QAAQ,EAAE,IAAI;YACd,UAAU,EAAE,IAAI;YAChB,WAAW,EAAE,KAAK;SACrB,CAAC;QACF,UAAU,GAAG,MAAM,CAAC,UAAU,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;QAC/C,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACZ,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;QAC/B,CAAC;QAED,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,GAAG,8BAA8B;YACnF,wCAAwC,GAAG,MAAM,GAAG,MAAM;YAC1D,mDAAmD,GAAG,MAAM,GAAG,MAAM,GAAG,IAAI,CAAC,OAAO;YACpF,6BAA6B,GAAG,GAAG,CAAC,GAAG,UAAU,GAAG,QAAQ,CAAC,CAAC;QAClE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACjD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,SAAS,CAAC,CAAC,CAAC;YAC7B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,wCAAwC,CAAC,CAAC;QACpE,CAAC;IACL,CAAC;IACL,yBAAC;AAAD,CAnHA,AAmHC,IAAA;AAED,CAAC;IACG,YAAY,CAAC;IAEb,IAAM,iBAAiB,GAAG;QACtB,UAAU,EAAE,kBAAkB;QAC9B,QAAQ,EAAE;YACN,IAAI,EAAE,UAAU;YAChB,MAAM,EAAE,WAAW;YACnB,KAAK,EAAE,gBAAgB;YACvB,MAAM,EAAE,aAAa;SACxB;KACJ,CAAA;IAED,OAAO,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,YAAY,CAAC,CAAC;SACxC,GAAG,CAAC,MAAM,CAAC;SACX,SAAS,CAAC,aAAa,EAAE,iBAAiB,CAAC,CAAC;AACrD,CAAC,CAAC,EAAE,CAAC;;;;;AC7JL;IAgBI,2BACI,MAAiB,EACjB,UAAU,EACV,QAAQ,EACR,QAAQ,EACR,QAAQ;QALZ,iBAiCC;QAzBM,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,CAAC;QAChD,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC;QAC1C,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC;QACxC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC;QACxC,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC;QACzC,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC;QACtD,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC,uBAAuB,CAAC,CAAC;QAClD,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,sBAAsB,EAAC,cAAO,KAAI,CAAC,aAAa,EAAE,CAAA,CAAA,CAAC,CAAC,CAAC;QAC7E,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,KAAK,KAAK,GAAG,gBAAgB,GAAG,EAAE,CAAC,CAAC;QAE7F,QAAQ,CAAC;YACJ,KAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC5B,KAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;gBAC3D,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;YACvD,CAAC;YAED,KAAI,CAAC,IAAI,EAAE,CAAC;QACjB,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,cAAQ,KAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QAC5C,UAAU,CAAC,GAAG,CAAC,kBAAkB,EAAE,cAAQ,KAAI,CAAC,QAAQ,EAAE,CAAA,CAAA,CAAC,CAAC,CAAC;QAC7D,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,cAAQ,KAAI,CAAC,QAAQ,EAAE,CAAA,CAAC,CAAC,CAAC,CAAC;IAEnD,CAAC;IAEM,yCAAa,GAApB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,cAAc,EAAE,CAAC;QAC1B,CAAC;QACD,IAAI,CAAC,YAAY,EAAE,CAAC;IACxB,CAAC;IAEM,wCAAY,GAAnB;QAAA,iBAKC;QAJG,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAC3C,IAAI,CAAC,SAAS,CAAC;YACX,KAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;QAClC,CAAC,EAAE,GAAG,CAAC,CAAC;IACZ,CAAC;IAEM,0CAAc,GAArB,UAAsB,EAAE;QACpB,EAAE,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC;IAGO,gCAAI,GAAZ;QACI,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACxC,CAAC,CAAC,uBAAuB,CAAC,CAAC,KAAK,EAAE,CAAC;QACnC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,SAAS,CAAC;gBACX,IAAI,CAAC,YAAY,EAAE,CAAC;YACxB,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACrB,CAAC;IACL,CAAC;IAEO,oCAAQ,GAAhB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACf,IAAI,OAAO,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,EACzB,GAAG,GAAG,OAAO,CAAC,MAAM,EAAE,EACtB,KAAK,GAAG,OAAO,CAAC,KAAK,EAAE,EACvB,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE,EACzB,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,KAAK,EAAE,EAC9B,SAAS,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,EAChC,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YAExD,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACN,OAAO;qBACF,GAAG,CAAC,WAAW,EAAE,QAAQ,GAAG,CAAC,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC;qBAClD,GAAG,CAAC,YAAY,EAAE,SAAS,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;qBACzD,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,GAAG,OAAO,CAAC,KAAK,EAAE,GAAG,KAAK,GAAG,CAAC,CAAC;qBACnD,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,GAAG,GAAG,MAAM,GAAG,EAAE,CAAC,CAAC;YAC3C,CAAC;QACL,CAAC;IACL,CAAC;IAEO,oCAAQ,GAAhB;QACI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;QACzF,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,IAAI,CAAC,UAAU,EAAE,CAAC;IACtB,CAAC;IAEO,sCAAU,GAAlB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC;YAAC,MAAM,CAAC;QAAC,CAAC;QACrC,IAAI,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,EACvD,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,EAClC,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,EACpC,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,EACtC,aAAa,GAAG,OAAO,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACtF,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;IACjG,CAAC;IACL,wBAAC;AAAD,CAnHA,AAmHC,IAAA;AAnHY,8CAAiB;AAqH9B,CAAC;IACG,oBAAoB,MAAW;QAC3B,UAAU,CAAC;QAET,MAAM,CAAC;YACD,QAAQ,EAAE,IAAI;YACd,KAAK,EAAE,IAAI;YACX,WAAW,EAAE,sBAAsB;YACnC,UAAU,EAAE,iBAAiB;YAC7B,YAAY,EAAE,IAAI;SACrB,CAAC;IACV,CAAC;IAED,OAAO;SACF,MAAM,CAAC,YAAY,EAAE,CAAC,oBAAoB,CAAC,CAAC;SAC5C,SAAS,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;AAE7C,CAAC,CAAC,EAAE,CAAC;;;;;ACvIL;IASI,wBACI,QAAQ,EACR,UAAU,EACV,QAAQ;QAEL,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,eAAe,GAAG,wFAAwF;YAC1G,wEAAwE,CAAC;IACrF,CAAC;IAEM,6BAAI,GAAX,UAAY,CAAC;QACT,IAAI,OAAO,EAAE,KAAgB,EAAE,MAAM,EAAE,OAAO,CAAC;QAE/C,OAAO,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC;QACpB,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAAC,MAAM,CAAC;QAAC,CAAC;QACvD,IAAI,CAAC,IAAI,EAAE,CAAC;QACZ,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;QAChC,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;QACrC,KAAK,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;QACzB,KAAK,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;QAChC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC,CAAC;QACtD,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC5B,CAAC;IAEM,6BAAI,GAAX;QACI,IAAI,eAAe,GAAG,CAAC,CAAC,uBAAuB,CAAC,CAAC;QACjD,eAAe,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QACtC,IAAI,CAAC,SAAS,CAAC;YACX,eAAe,CAAC,MAAM,EAAE,CAAC;QAC7B,CAAC,EAAE,GAAG,CAAC,CAAC;IACZ,CAAC;IAEM,+BAAM,GAAb;QACI,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC;IACpD,CAAC;IACL,qBAAC;AAAD,CA9CA,AA8CC,IAAA;AA9CY,wCAAc;AAiD3B,CAAC;IACG,OAAO;SACF,MAAM,CAAC,oBAAoB,EAAE,EAAE,CAAC;SAChC,OAAO,CAAC,mBAAmB,EAAE,cAAc,CAAC,CAAC;AACtD,CAAC,CAAC,EAAE,CAAC;;;ACrDL;IAOI,2BACI,MAAiB,EACjB,QAAQ;QAGR,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,CAAC;QACjD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC;IAC3C,CAAC;IAEM,qCAAS,GAAhB;QACI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzC,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC7B,CAAC;IAEM,6CAAiB,GAAxB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAC1C,CAAC;IACL,CAAC;IACL,wBAAC;AAAD,CA3BA,AA2BC,IAAA;AAGD,CAAC;IAEG,IAAM,eAAe,GAAG;QAChB,OAAO,EAAE,IAAI;QACb,QAAQ,EAAE;YACN,YAAY,EAAE,GAAG;YACjB,OAAO,EAAE,GAAG;SACf;QACD,WAAW,EAAE,gCAAgC;QAC7C,UAAU,EAAE,iBAAiB;QAC7B,YAAY,EAAE,IAAI;KACzB,CAAA;IAGD,OAAO;SACF,MAAM,CAAC,oBAAoB,EAAE,CAAC,YAAY,CAAC,CAAC;SAC5C,SAAS,CAAC,oBAAoB,EAAE,eAAe,CAAC,CAAC;AAE1D,CAAC,CAAC,EAAE,CAAC;;;ACrCL;IAUI,yBACI,QAAwC,EACxC,KAAgB,EAChB,SAAS;QAEL,IAAI,CAAC,sBAAsB,GAAG,SAAS,CAAC,GAAG,CAAC,uBAAuB,CAAC;cAC9D,SAAS,CAAC,GAAG,CAAC,uBAAuB,CAAC,GAAG,IAAI,CAAC;QACpD,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;QAC7B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;QAC7B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAEnB,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;QAC1B,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,MAAM,GAAG,IAAI,CAAC;QAC/F,CAAC;QAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,sBAAsB,IAAI,IAAI,CAAC;IAE/D,CAAC;IAEO,mCAAS,GAAhB;QACG,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QACtB,EAAE,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAChC;gBACI,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK;gBACvB,EAAE,EAAE,IAAI;aACX,EACD,OAAO,CAAC,IAAI,EACZ,OAAO,CAAC,IAAI,CACX,CAAC;QACN,CAAC;IACL,CAAC;IAEM,kCAAQ,GAAf,UAAgB,MAAM;QAClB,IAAI,CAAC,SAAS,CAAC,IAAI,CACnB;YACI,MAAM,EAAE,MAAM;YACd,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE;YACjB,OAAO,EAAE,IAAI,CAAC,OAAO;SACxB,CAAC,CAAC;IAEP,CAAC;IACL,sBAAC;AAAD,CAvDA,AAuDC,IAAA;AAiBD;IASI,sBACI,UAAgC,EAChC,QAAwC;QAF5C,iBASC;QAjBO,iBAAY,GAAW,KAAK,CAAC;QAC7B,+BAA0B,GAAW,KAAK,CAAC;QAC3C,WAAM,GAAgB,EAAE,CAAC;QAEzB,WAAM,GAAQ,EAAE,CAAC;QAQrB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAE1B,UAAU,CAAC,GAAG,CAAC,qBAAqB,EAAE,cAAO,KAAI,CAAC,oBAAoB,EAAE,CAAA,CAAA,CAAC,CAAC,CAAC;QAC3E,UAAU,CAAC,GAAG,CAAC,kBAAkB,EAAE,cAAO,KAAI,CAAC,aAAa,EAAE,CAAA,CAAA,CAAC,CAAC,CAAC;QACjE,UAAU,CAAC,GAAG,CAAC,oBAAoB,EAAE,cAAO,KAAI,CAAC,aAAa,EAAE,CAAA,CAAA,CAAC,CAAC,CAAC;IACvE,CAAC;IAEM,oCAAa,GAApB;QACI,IAAI,KAAgB,CAAC;QAErB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACzB,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACzB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC1B,CAAC;IACL,CAAC;IAGO,gCAAS,GAAhB,UAAiB,KAAgB;QAAjC,iBAsBA;QArBG,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAE1B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;YAChB,WAAW,EAAE,kBAAkB;YAC/B,SAAS,EAAE,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,YAAY;YAC9C,QAAQ,EAAE,aAAa;YACvB,UAAU,EAAE,eAAe;YAC3B,YAAY,EAAE,IAAI;YAClB,MAAM,EAAE;gBACJ,KAAK,EAAE,IAAI,CAAC,YAAY;gBACxB,MAAM,EAAE,IAAI,CAAC,MAAM;aACtB;SACJ,CAAC;aACD,IAAI,CACD,UAAC,MAAc;YACX,KAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QACnC,CAAC,EACD,UAAC,MAAc;YACX,KAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;QACvC,CAAC,CACJ,CAAC;IACN,CAAC;IAEO,4CAAqB,GAA7B,UAA8B,MAAc;QACxC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC,CAAC;YACnC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC7C,CAAC;QACD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IAEO,wCAAiB,GAAzB,UAA0B,MAAc;QACpC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC,CAAC;YACpC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QAC9C,CAAC;QACD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IAEM,+BAAQ,GAAf,UAAgB,KAAK;QACjB,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,KAAK,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC;YAC9C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5B,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC1B,CAAC;IACL,CAAC;IAEM,mCAAY,GAAnB,UAAoB,IAAY;QAC5B,IAAI,MAAM,GAAU,EAAE,CAAC;QACvB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,UAAC,KAAK;YACtB,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;gBACrC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACvB,CAAC;QACL,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IACtC,CAAC;IAEM,uCAAgB,GAAvB,UAAwB,EAAU;QAC9B,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,EAAC,EAAE,EAAE,EAAE,EAAC,CAAC,CAAC;IACpC,CAAC;IAEM,mCAAY,GAAnB,UAAoB,EAAU;QAC1B,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,EAAC,EAAE,EAAE,EAAE,EAAC,CAAC,CAAC;IACzC,CAAC;IAEM,2CAAoB,GAA3B,cAA+B,CAAC;IAEzB,oCAAa,GAApB;QACI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAEM,uCAAgB,GAAvB,UAAwB,OAAe,EAAE,OAAiB,EAAE,eAAe,EAAE,cAAc,EAAE,EAAU;QACnG,IAAI,CAAC,QAAQ,CAAC;YACV,EAAE,EAAE,EAAE,IAAI,IAAI;YACd,IAAI,EAAE,cAAc;YACpB,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO,IAAI,CAAC,IAAI,CAAC;YAC1B,eAAe,EAAE,eAAe;YAChC,cAAc,EAAE,cAAc;YAC9B,QAAQ,EAAE,IAAI,CAAC,0BAA0B;SAC5C,CAAC,CAAC;IACP,CAAC;IAEM,kCAAW,GAAlB,UAAmB,OAAe,EAAE,eAAe,EAAE,cAAc,EAAE,EAAW;QAC5E,IAAI,CAAC,QAAQ,CAAC;YACV,EAAE,EAAE,EAAE,IAAI,IAAI;YACd,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,CAAC,IAAI,CAAC;YACf,eAAe,EAAE,eAAe;YAChC,cAAc,EAAE,cAAc;SACjC,CAAC,CAAC;IACP,CAAC;IAEO,gCAAS,GAAhB,UAAiB,OAAe,EAAE,eAAe,EAAE,cAAc,EAAE,EAAU,EAAE,KAAU;QACtF,IAAI,CAAC,QAAQ,CAAC;YACV,EAAE,EAAE,EAAE,IAAI,IAAI;YACd,KAAK,EAAE,KAAK;YACZ,IAAI,EAAE,OAAO;YACb,OAAO,EAAE,OAAO,IAAI,gBAAgB;YACpC,OAAO,EAAE,CAAC,IAAI,CAAC;YACf,eAAe,EAAE,eAAe;YAChC,cAAc,EAAE,cAAc;SACjC,CAAC,CAAC;IACP,CAAC;IAEM,oCAAa,GAApB;QACI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;QACxB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IACrB,CAAC;IAEM,kCAAW,GAAlB,UAAmB,IAAa;QAC5B,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YAEP,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAC5B,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;YACxB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACrB,CAAC;IACL,CAAC;IAEL,mBAAC;AAAD,CAzJA,AAyJC,IAAA;AAGD,CAAC;IACG,OAAO;SACF,MAAM,CAAC,WAAW,EAAE,CAAC,YAAY,EAAE,uBAAuB,CAAC,CAAC;SAC5D,OAAO,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;AAC5C,CAAC,CAAC,EAAE,CAAC;;;ACrPL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"pip-webui-controls.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export interface IColorPicker {\n    class: string;\n    colors: string[];\n    currentColor: string;\n    currentColorIndex: number;\n    ngDisabled: Function;\n    colorChange: Function;\n\n    enterSpacePress(event): void;\n    disabled(): boolean;\n    selectColor(index: number);\n}\n\nconst DEFAULT_COLORS = ['purple', 'lightgreen', 'green', 'darkred', 'pink', 'yellow', 'cyan'];\n\nexport class ColorPickerController implements IColorPicker {\n\n    private _$timeout;\n    private _$scope: ng.IScope;\n\n    public class: string;\n    public colors: string[];\n    public currentColor: string;\n    public currentColorIndex: number;\n    public ngDisabled: Function;\n    public colorChange: Function;\n\n    constructor(\n        $scope: ng.IScope,\n        $element,\n        $attrs,\n        $timeout) {\n        this._$timeout = $timeout;\n        this._$scope = $scope;\n\n        this.class = $attrs.class || '';\n        this.colors = !$scope['vm']['colors'] || \n                _.isArray($scope['vm']['colors']) && $scope['vm']['colors'].length === 0 ? DEFAULT_COLORS : $scope['vm']['colors'];\n        this.colorChange = $scope['vm']['colorChange'] || null;\n        this.currentColor = $scope['vm']['currentColor'] || this.colors[0];\n        this.currentColorIndex = this.colors.indexOf(this.currentColor);\n        this.ngDisabled = $scope['vm']['ngDisabled'] || false;\n    }\n\n    public $onChanges(changes: any) {\n        this.colors = _.isArray(changes['colors'].currentValue) && changes['colors'].currentValue.length !== 0 ? \n            changes['colors'].currentValue : DEFAULT_COLORS;\n        this.currentColor = changes['currentColor'].currentValue || this.colors[0];\n    }\n\n    public disabled(): boolean {\n        if (this.ngDisabled) {\n            return true;\n        }\n\n        return false;\n    };\n\n    public selectColor(index: number) {\n        if (this.disabled()) {\n            return;\n        }\n        this.currentColorIndex = index;\n        this.currentColor = this.colors[this.currentColorIndex];\n        this._$timeout(() => {\n            this._$scope.$apply();\n        });\n\n        if (this.colorChange) {\n            this.colorChange();\n        }\n    };\n\n    public enterSpacePress(event): void {\n        this.selectColor(event.index);\n    };\n\n}\n\nconst pipColorPicker = {\n    bindings: {\n        ngDisabled: '<?ngDisabled',\n        colors: '<pipColors',\n        currentColor: '=ngModel',\n        colorChange: '<?ngChange'\n    },\n    templateUrl: 'color_picker/color_picker.html',\n    controller: ColorPickerController,\n    controllerAs: 'vm'\n}\n\nangular\n    .module('pipColorPicker', ['pipControls.Templates'])\n    .component('pipColorPicker', pipColorPicker);","﻿/// <reference path=\"../typings/tsd.d.ts\" />\n\n(() => {\n    'use strict';\n\n    angular.module('pipControls', [\n        'pipMarkdown',\n        'pipColorPicker',\n        'pipRoutingProgress',\n        'pipPopover',\n        'pipImageSlider',\n        'pipToasts',\n        'pipControls.Translate'\n    ]);\n\n})();\n\n","/// <reference path=\"../../typings/tsd.d.ts\" />\n\n(function () {\n    'use strict';\n\n    var thisModule = angular.module('pipControls.Translate', []);\n\n    thisModule.filter('translate', function ($injector) {\n        var pipTranslate = $injector.has('pipTranslate') \n            ? $injector.get('pipTranslate') : null;\n\n        return function (key) {\n            return pipTranslate  ? pipTranslate.translate(key) || key : key;\n        }\n    });\n\n})();\n","/// <reference path=\"../../typings/tsd.d.ts\" />\n\nclass pipImageSliderController{\n\n    private _$attrs;\n    private _$interval: angular.IIntervalService;\n    private _$scope: angular.IScope;\n\n    private _blocks: any[];\n    private _index: number = 0;\n    private _newIndex: number;\n    private _direction: string;\n    private _type: any;\n    private DEFAULT_INTERVAL = 4500;\n    private _interval;\n    private _timePromises;\n    private _throttled: Function;\n\n    public swipeStart: number = 0;\n    public sliderIndex: number;\n    public slideTo: Function;\n\n    constructor(\n        $scope: ng.IScope, \n        $element, \n        $attrs, \n        $parse: ng.IParseService, \n        $timeout: angular.ITimeoutService,\n        $interval: angular.IIntervalService, \n        pipImageSlider) {\n\n        this.sliderIndex = $scope['vm']['sliderIndex'];\n        this._type = $scope['vm']['type']();\n        this._interval = $scope['vm']['interval']();\n        this._$attrs = $attrs;\n        this._$interval = $interval;\n        this._$scope = $scope;\n        $scope['slideTo'] = this.slideToPrivate;\n\n        $element.addClass('pip-image-slider');\n        $element.addClass('pip-animation-' + this._type);\n        \n        this.setIndex();\n\n        $timeout(() => {\n            this._blocks = $element.find('.pip-animation-block');\n            if (this._blocks.length > 0) {\n                $(this._blocks[0]).addClass('pip-show');\n            }\n        });\n\n        this.startInterval();\n\n        this._throttled = _.throttle(() => {\n            pipImageSlider.toBlock(this._type, this._blocks, this._index, this._newIndex, this._direction);\n            this._index = this._newIndex;\n            this.setIndex();\n        }, 700);\n        \n        if ($attrs.id) { pipImageSlider.registerSlider($attrs.id, $scope) }\n\n        $element.on('$destroy', () => {\n            this.stopInterval();\n            pipImageSlider.removeSlider($attrs.id);\n        });\n\n    }\n\n    public nextBlock() {\n        this.restartInterval();\n        this._newIndex = this._index + 1 === this._blocks.length ? 0 : this._index + 1;\n        this._direction = 'next';\n        this._throttled();\n    }\n\n    public prevBlock() {\n        this.restartInterval();\n        this._newIndex = this._index - 1 < 0 ? this._blocks.length - 1 : this._index - 1;\n        this._direction = 'prev';\n        this._throttled();\n    }\n\n    private slideToPrivate(nextIndex: number) {\n        if (nextIndex === this._index || nextIndex > this._blocks.length - 1) {\n            return;\n        }\n\n        this.restartInterval();\n        this._newIndex = nextIndex;\n        this._direction = nextIndex > this._index ? 'next' : 'prev';\n        this._throttled();\n    }\n\n    private setIndex() {\n        if (this._$attrs.pipImageIndex) this.sliderIndex = this._index;\n    }\n\n    private startInterval() {\n        this._timePromises = this._$interval(() => {\n            this._newIndex = this._index + 1 === this._blocks.length ? 0 : this._index + 1;\n            this._direction = 'next';\n            this._throttled();\n        }, this._interval || this.DEFAULT_INTERVAL);\n    }\n\n    private stopInterval() {\n        this._$interval.cancel(this._timePromises);\n    }\n\n    private restartInterval() {\n        this.stopInterval();\n        this.startInterval();\n    }\n}\n\n(() => {\n\n    function pipImageSlider() {\n        return {\n            scope: {\n                sliderIndex: '=pipImageIndex',\n                type: '&pipAnimationType',\n                interval: '&pipAnimationInterval'\n            },\n            bindToController: true,\n            controller: pipImageSliderController,\n            controllerAs: 'vm'\n        };\n    }\n\n\n    angular\n        .module('pipImageSlider', ['pipSliderButton', 'pipSliderIndicator', 'pipImageSlider.Service'])\n        .directive('pipImageSlider', pipImageSlider);\n})();\n","/// <reference path=\"../../typings/tsd.d.ts\" />\n\ninterface IImageSliderService {\n    registerSlider(sliderId: string, sliderScope): void;\n    removeSlider(sliderId: string): void;\n    getSliderScope(sliderId: string);\n    nextCarousel(nextBlock, prevBlock): void;\n    prevCarousel(nextBlock, prevBlock): void;\n    toBlock(type: string, blocks: any[], oldIndex: number, nextIndex: number, direction: string): void;\n}\n\nclass ImageSliderService {\n    private _$timeout: angular.ITimeoutService;\n    private ANIMATION_DURATION: number = 550;\n    private _sliders = {};\n\n    constructor($timeout: angular.ITimeoutService) {\n        this._$timeout = $timeout;\n    }\n\n    public registerSlider(sliderId: string, sliderScope): void {\n        this._sliders[sliderId] = sliderScope;\n    }\n            \n    public removeSlider(sliderId: string): void {\n        delete this._sliders[sliderId];\n    }\n\n    public getSliderScope(sliderId: string) {\n        return this._sliders[sliderId];\n    }\n\n    public nextCarousel(nextBlock, prevBlock): void {\n        nextBlock.addClass('pip-next');\n                \n        this._$timeout(() => {\n            nextBlock.addClass('animated').addClass('pip-show').removeClass('pip-next');\n            prevBlock.addClass('animated').removeClass('pip-show');\n        }, 100);\n    }\n\n    public prevCarousel(nextBlock, prevBlock): void {\n        this._$timeout(() => {\n            nextBlock.addClass('animated').addClass('pip-show');\n            prevBlock.addClass('animated').addClass('pip-next').removeClass('pip-show');\n        }, 100);\n    }\n\n    public toBlock(type: string, blocks: any[], oldIndex: number, nextIndex: number, direction: string): void {\n        let prevBlock = $(blocks[oldIndex]),\n            blockIndex: number = nextIndex,\n            nextBlock = $(blocks[blockIndex]);\n\n        if (type === 'carousel') {\n            $(blocks).removeClass('pip-next').removeClass('pip-prev').removeClass('animated');\n\n            if (direction && (direction === 'prev' || direction === 'next')) {\n                if (direction === 'prev') {\n                    this.prevCarousel(nextBlock, prevBlock);\n                } else {\n                    this.nextCarousel(nextBlock, prevBlock);\n                }\n            } else {\n                if (nextIndex && nextIndex < oldIndex) {\n                    this.prevCarousel(nextBlock, prevBlock);\n                } else {\n                    this.nextCarousel(nextBlock, prevBlock);\n                }\n            }\n        } else {\n            prevBlock.addClass('animated').removeClass('pip-show');\n            nextBlock.addClass('animated').addClass('pip-show');\n        }\n    }\n\n}\n\n\n(() => {\n    'use strict';\n    angular\n        .module('pipImageSlider.Service', [])\n        .service('pipImageSlider', ImageSliderService);\n})();\n","/// <reference path=\"../../typings/tsd.d.ts\" />\n\n(() => {\n    'use strict';\n\n    var thisModule = angular.module('pipSliderButton', []);\n\n    thisModule.directive('pipSliderButton',\n        function () {\n            return {\n                scope: {},\n                controller: function ($scope, $element, $parse, $attrs, pipImageSlider) {\n                    var type = $parse($attrs.pipButtonType)($scope),\n                        sliderId = $parse($attrs.pipSliderId)($scope);\n\n                    $element.on('click', () => {\n                        if (!sliderId || !type) {\n                            return;\n                        }\n\n                        pipImageSlider.getSliderScope(sliderId).vm[type + 'Block']();\n                    });\n                }\n            };\n        }\n    );\n\n})();\n","/// <reference path=\"../../typings/tsd.d.ts\" />\n\n(function () {\n    'use strict';\n\n    var thisModule = angular.module('pipSliderIndicator', []);\n\n    thisModule.directive('pipSliderIndicator',\n        function () {\n            return {\n                scope: false,\n                controller: ($scope, $element, $parse, $attrs, pipImageSlider) => {\n                    var sliderId = $parse($attrs.pipSliderId)($scope),\n                        slideTo = $parse($attrs.pipSlideTo)($scope);\n\n                    $element.css('cursor', 'pointer');\n                    $element.on('click',  () => {\n                        if (!sliderId || slideTo && slideTo < 0) {\n                            return;\n                        }\n                        pipImageSlider.getSliderScope(sliderId).vm.slideToPrivate(slideTo);\n                    });\n                }\n            };\n        }\n    );\n\n})();\n","/// <reference path=\"../../typings/tsd.d.ts\" />\n\ndeclare var marked: any;\n\nfunction Config($injector) {\n    const pipTranslate = $injector.has('pipTranslate') ? $injector.get('pipTranslate') : null;\n\n    if (pipTranslate) {\n        pipTranslate.setTranslations('en', {\n            'MARKDOWN_ATTACHMENTS': 'Attachments:',\n            'checklist': 'Checklist',\n            'documents': 'Documents',\n            'pictures': 'Pictures',\n            'location': 'Location',\n            'time': 'Time'\n        });\n        pipTranslate.setTranslations('ru', {\n            'MARKDOWN_ATTACHMENTS': 'Вложения:',\n            'checklist': 'Список',\n            'documents': 'Документы',\n            'pictures': 'Изображения',\n            'location': 'Местонахождение',\n            'time': 'Время'\n        });\n    }\n}\n\nclass MarkdownController {\n    private _pipTranslate;\n    private _$parse: angular.IParseService;\n    private _$scope: angular.IScope;\n    private _$injector;\n    private _$element;\n    private _$attrs;\n    private _text;\n    private _isList;\n    private _clamp;\n    private _rebind;\n\n    constructor(\n        $scope: angular.IScope,\n        $parse: angular.IParseService,\n        $attrs,\n        $element,\n        $injector\n    ) {\n        this._pipTranslate = $injector.has('pipTranslate') ? $injector.get('pipTranslate') : null;\n        this._$parse = $parse;\n        this._$scope = $scope;\n        this._$injector = $injector;\n        this._$element = $element;\n        this._$attrs = $attrs;\n        this._text = $scope['$ctrl']['text'];\n        this._isList = $scope['$ctrl']['isList'];\n        this._clamp = $scope['$ctrl']['clamp'];\n        this._rebind = $scope['$ctrl']['rebind'];\n    }\n\n    public $postLink() {\n        // Fill the text\n        this.bindText(this._text);\n\n        this._$scope.$on('pipWindowResized', function () {\n            if (this.bindText) this.bindText(this._text(this._$scope));\n        });\n\n        // Add class\n        this._$element.addClass('pip-markdown');\n\n    }\n\n    public $onChanges(changes: any) {\n        const newText = changes['text'].currentValue;\n\n        if (this._rebind) {\n            if (this._text !== newText) {\n                this._text = newText;\n                this.bindText(this._text);\n            }\n        }\n    }\n\n    private describeAttachments(array) {\n        var attachString = '',\n            attachTypes = [];\n\n        _.each(array, function (attach) {\n            if (attach.type && attach.type !== 'text') {\n                if (attachString.length === 0 && this._pipTranslate) {\n                    attachString = this._pipTranslate.translate('MARKDOWN_ATTACHMENTS');\n                }\n\n                if (attachTypes.indexOf(attach.type) < 0) {\n                    attachTypes.push(attach.type);\n                    attachString += attachTypes.length > 1 ? ', ' : ' ';\n                    if (this._pipTranslate)\n                        attachString += this._pipTranslate.translate(attach.type);\n                }\n            }\n        });\n\n        return attachString;\n    }\n\n    private bindText(value) {\n        var textString, isClamped, height, options, obj;\n\n        if (_.isArray(value)) {\n            obj = _.find(value, function (item: any) {\n                return item.type === 'text' && item.text;\n            });\n\n            textString = obj ? obj.text : this.describeAttachments(value);\n        } else {\n            textString = value;\n        }\n\n        isClamped = this._$attrs.pipLineCount && _.isNumber(this._clamp);\n        isClamped = isClamped && textString && textString.length > 0;\n        options = {\n            gfm: true,\n            tables: true,\n            breaks: true,\n            sanitize: true,\n            pedantic: true,\n            smartLists: true,\n            smartypents: false\n        };\n        textString = marked(textString || '', options);\n        if (isClamped) {\n            height = 1.5 * this._clamp;\n        } \n        // Assign value as HTML\n        this._$element.html('<div' + (isClamped ? this._isList ? 'class=\"pip-markdown-content ' +\n            'pip-markdown-list\" style=\"max-height: ' + height + 'em\">' :\n            ' class=\"pip-markdown-content\" style=\"max-height: ' + height + 'em\">' : this._isList ?\n            ' class=\"pip-markdown-list\">' : '>') + textString + '</div>');\n        this._$element.find('a').attr('target', 'blank');\n        if (!this._isList && isClamped) {\n            this._$element.append('<div class=\"pip-gradient-block\"></div>');\n        }\n    }\n}\n\n(function () {\n    'use strict';\n\n    const MarkdownComponent = {\n        controller: MarkdownController,\n        bindings: {\n            text: '<pipText',\n            isList: '<?pipList',\n            clamp: '<?pipLineCount',\n            rebind: '<?pipRebind'\n        }\n    }\n\n    angular.module('pipMarkdown', ['ngSanitize'])\n        .run(Config)\n        .component('pipMarkdown', MarkdownComponent);\n})();","/// <reference path=\"../../typings/tsd.d.ts\" />\n\n\nexport class PopoverController {\n  \n    private _$timeout;\n    private _$scope: ng.IScope;\n\n    public timeout;\n    public backdropElement;\n    public content;\n    public element;\n    public calcH: boolean;\n\n    public templateUrl;\n    public template\n\n    public cancelCallback: Function;\n\n    constructor( \n        $scope: ng.IScope,\n        $rootScope,\n        $element,\n        $timeout, \n        $compile\n       ) {\n           //$scope = _.defaults($scope, $scope.$parent);    // eslint-disable-line \n           this._$timeout = $timeout;\n           this.templateUrl = $scope['params'].templateUrl;\n           this.template = $scope['params'].template;\n           this.timeout = $scope['params'].timeout;\n           this.element = $scope['params'].element;\n           this.calcH = $scope['params'].calcHeight;\n           this.cancelCallback = $scope['params'].cancelCallback;\n           this.backdropElement = $('.pip-popover-backdrop');\n           this.backdropElement.on('click keydown scroll',() =>{ this.backdropClick()});\n           this.backdropElement.addClass($scope['params'].responsive !== false ? 'pip-responsive' : '');\n\n           $timeout(() => {\n                this.position();\n                if ($scope['params'].template) {\n                    this.content = $compile($scope['params'].template)($scope);\n                    $element.find('.pip-popover').append(this.content);\n                }\n\n                this.init();\n           });\n\n           $timeout(() => { this.calcHeight(); }, 200);\n           $rootScope.$on('pipPopoverResize', () => { this.onResize()});\n           $(window).resize(() => { this.onResize() });\n\n    }\n\n    public backdropClick() {\n        if (this.cancelCallback) {\n            this.cancelCallback();\n        }\n        this.closePopover();\n    }\n\n    public closePopover() {\n        this.backdropElement.removeClass('opened');\n        this._$timeout(() => {\n            this.backdropElement.remove();\n        }, 100);\n    }\n\n    public onPopoverClick($e) {\n        $e.stopPropagation();\n    }\n\n\n    private init() {\n        this.backdropElement.addClass('opened');\n        $('.pip-popover-backdrop').focus();\n        if (this.timeout) {\n            this._$timeout(function () {\n                this.closePopover();\n            }, this.timeout);\n        }\n    }\n\n    private position() {\n        if (this.element) {\n            let element = $(this.element),\n                pos = element.offset(),\n                width = element.width(),\n                height = element.height(),\n                docWidth = $(document).width(),\n                docHeight = $(document).height(),\n                popover = this.backdropElement.find('.pip-popover');\n\n            if (pos) {\n                popover\n                    .css('max-width', docWidth - (docWidth - pos.left))\n                    .css('max-height', docHeight - (pos.top + height) - 32, 0)\n                    .css('left', pos.left - popover.width() + width / 2)\n                    .css('top', pos.top + height + 16);\n            }\n        }\n    }\n\n    private onResize() {\n        this.backdropElement.find('.pip-popover').find('.pip-content').css('max-height', '100%');\n        this.position();\n        this.calcHeight();\n    }\n\n    private calcHeight() {\n        if (this.calcH === false) { return; }\n        let popover = this.backdropElement.find('.pip-popover'),\n        title = popover.find('.pip-title'),\n        footer = popover.find('.pip-footer'),\n        content = popover.find('.pip-content'),\n        contentHeight = popover.height() - title.outerHeight(true) - footer.outerHeight(true);\n        content.css('max-height', Math.max(contentHeight, 0) + 'px').css('box-sizing', 'border-box');\n    }\n}\n\n(() => {\n    function pipPopover($parse: any) {\n        \"ngInject\";\n\n          return {\n                restrict: 'EA',\n                scope: true,\n                templateUrl: 'popover/popover.html',\n                controller: PopoverController,\n                controllerAs: 'vm'\n            };\n    }\n\n    angular\n        .module('pipPopover', ['pipPopover.Service'])\n        .directive('pipPopover', pipPopover);\n\n})();","/// <reference path=\"../../typings/tsd.d.ts\" />\n\nexport class PopoverService {\n  \n    private _$timeout;\n    private _$scope: ng.IScope;\n    private _$compile;\n    private _$rootScope: ng.IRootScopeService;\n\n    public popoverTemplate: string;\n\n    constructor( \n        $compile,\n        $rootScope, \n        $timeout\n       ) {\n           this._$compile = $compile;\n           this._$rootScope = $rootScope;\n           this._$timeout = $timeout;\n           this.popoverTemplate = \"<div class='pip-popover-backdrop {{ params.class }}' ng-controller='params.controller'\" +\n                \" tabindex='1'> <pip-popover pip-params='params'> </pip-popover> </div>\";\n    }\n\n    public show(p) {\n        let element, scope: ng.IScope, params, content;\n            \n        element = $('body');\n        if (element.find('md-backdrop').length > 0) { return; }\n        this.hide();\n        scope = this._$rootScope.$new();\n        params = p && _.isObject(p) ? p : {};\n        scope['params'] = params;\n        scope['locals'] = params.locals;\n        content = this._$compile(this.popoverTemplate)(scope);\n        element.append(content);\n    }\n\n    public hide() {\n        let backdropElement = $('.pip-popover-backdrop');\n        backdropElement.removeClass('opened');\n        this._$timeout(() => {\n            backdropElement.remove();\n        }, 100);\n    }\n\n    public resize() {\n        this._$rootScope.$broadcast('pipPopoverResize');\n    }\n}\n\n\n(() => {\n    angular\n        .module('pipPopover.Service', [])\n        .service('pipPopoverService', PopoverService);\n})();","/// <reference path=\"../../typings/tsd.d.ts\" />\n\nclass RoutingController {\n    private _image: any;\n    private _$element;\n\n    public logoUrl: string;\n    public showProgress: Function;\n\n    constructor( \n        $scope: ng.IScope,\n        $element)\n    {\n\n        this._$element = $element;\n        this.showProgress = $scope['vm']['showProgress'];\n        this.logoUrl = $scope['vm']['logoUrl'];    \n    }\n\n    public $postLink() {\n        this._image = this._$element.find('img'); \n        this.loadProgressImage();\n    }\n\n    public loadProgressImage() {\n        if (this.logoUrl) {\n            this._image.attr('src', this.logoUrl);\n        }\n    }\n}\n\n\n(() => {\n\n    const RoutingProgress = {\n            replace: true,\n            bindings: {\n                showProgress: '&',\n                logoUrl: '@'\n            },\n            templateUrl: 'progress/routing_progress.html',\n            controller: RoutingController,\n            controllerAs: 'vm'\n    }\n\n\n    angular\n        .module('pipRoutingProgress', ['ngMaterial'])\n        .component('pipRoutingProgress', RoutingProgress);\n\n})();\n","/// <reference path=\"../../typings/tsd.d.ts\" />\n\ninterface IPipToast {\n    type: string;\n    id: string;\n    error: any;\n    message: string;\n    actions: string[];\n    duration: number;\n    successCallback: Function;\n    cancelCallback: Function\n}\n\nclass ToastController {\n    private _$mdToast: angular.material.IToastService;\n    private _pipErrorDetailsDialog;\n\n    public message: string;\n    public actions: string[];\n    public toast: IPipToast;\n    public actionLenght: number;\n    public showDetails: boolean;\n\n    constructor( \n        $mdToast: angular.material.IToastService, \n        toast: IPipToast, \n        $injector\n       ) {\n            this._pipErrorDetailsDialog = $injector.has('pipErrorDetailsDialog') \n                ? $injector.get('pipErrorDetailsDialog') : null;\n            this._$mdToast = $mdToast;\n            this.message = toast.message;\n            this.actions = toast.actions;\n            this.toast = toast;\n            \n            if (toast.actions.length === 0) {\n                this.actionLenght = 0;\n            } else {\n                this.actionLenght = toast.actions.length === 1 ? toast.actions[0].toString().length : null;\n            }\n\n            this.showDetails = this._pipErrorDetailsDialog != null;\n\n    }\n\n     public onDetails(): void {\n        this._$mdToast.hide();\n        if (this._pipErrorDetailsDialog) {\n            this._pipErrorDetailsDialog.show(\n            {\n                error: this.toast.error,\n                ok: 'Ok'\n            },\n            angular.noop,\n            angular.noop\n            );\n        }\n    }\n\n    public onAction(action): void {\n        this._$mdToast.hide(\n        {\n            action: action,\n            id: this.toast.id,\n            message: this.message\n        });\n\n    }\n}\n\ninterface IToastService {\n    showNextToast(): void;\n    showToast(toast: IPipToast): void;\n    addToast(toast): void;\n    removeToasts(type: string): void;\n    getToastById(id: string): IPipToast;\n    removeToastsById(id: string): void;\n    onClearToasts(): void;\n    showNotification(message: string, actions: string[], successCallback, cancelCallback, id: string);\n    showMessage(message: string, successCallback, cancelCallback, id?: string);\n    showError(message: string, successCallback, cancelCallback, id: string, error: any);\n    hideAllToasts(): void;\n    clearToasts(type?: string);\n}\n\nclass ToastService implements IToastService {\n    private SHOW_TIMEOUT: number = 20000;\n    private SHOW_TIMEOUT_NOTIFICATIONS: number = 20000;\n    private toasts: IPipToast[] = [];\n    private currentToast: any;\n    private sounds: any = {};\n\n    private _$mdToast: angular.material.IToastService;\n\n    constructor(\n        $rootScope: ng.IRootScopeService, \n        $mdToast: angular.material.IToastService) {\n\n        this._$mdToast = $mdToast;\n\n        $rootScope.$on('$stateChangeSuccess', () => {this.onStateChangeSuccess()});\n        $rootScope.$on('pipSessionClosed', () => {this.onClearToasts()});\n        $rootScope.$on('pipIdentityChanged', () => {this.onClearToasts()});\n    }\n\n    public showNextToast(): void {\n        let toast: IPipToast;\n\n        if (this.toasts.length > 0) {\n            toast = this.toasts[0];\n            this.toasts.splice(0, 1);\n            this.showToast(toast);\n        }\n    }\n\n     // Show toast\n     public showToast(toast: IPipToast): void {\n        this.currentToast = toast;\n\n        this._$mdToast.show({\n            templateUrl: 'toast/toast.html',\n            hideDelay: toast.duration || this.SHOW_TIMEOUT,\n            position: 'bottom left',\n            controller: ToastController,\n            controllerAs: 'vm',\n            locals: {\n                toast: this.currentToast,\n                sounds: this.sounds\n            }\n        })\n        .then( \n            (action: string) => {\n                this.showToastOkResult(action);\n            },\n            (action: string) => {\n                this.showToastCancelResult(action);\n            }\n        );\n    }\n\n    private showToastCancelResult(action: string):void {\n        if (this.currentToast.cancelCallback) {\n            this.currentToast.cancelCallback(action);\n        }\n        this.currentToast = null;\n        this.showNextToast();\n    }\n\n    private showToastOkResult(action: string): void {\n        if (this.currentToast.successCallback) {\n            this.currentToast.successCallback(action);\n        }\n        this.currentToast = null;\n        this.showNextToast();\n    }\n\n    public addToast(toast): void {\n        if (this.currentToast && toast.type !== 'error') {\n            this.toasts.push(toast);\n        } else {\n            this.showToast(toast);\n        }\n    }\n\n    public removeToasts(type: string): void {\n        let result: any[] = [];\n        _.each(this.toasts, (toast) => {\n            if (!toast.type || toast.type !== type) {\n                result.push(toast);\n            }\n        });\n        this.toasts = _.cloneDeep(result);\n    }\n\n    public removeToastsById(id: string): void {\n        _.remove(this.toasts, {id: id});\n    }\n\n    public getToastById(id: string): IPipToast {\n        return _.find(this.toasts, {id: id});\n    }\n\n    public onStateChangeSuccess() {}\n\n    public onClearToasts(): void {\n        this.clearToasts(null);\n    }\n\n    public showNotification(message: string, actions: string[], successCallback, cancelCallback, id: string) {\n        this.addToast({\n            id: id || null,\n            type: 'notification',\n            message: message,\n            actions: actions || ['ok'],\n            successCallback: successCallback,\n            cancelCallback: cancelCallback,\n            duration: this.SHOW_TIMEOUT_NOTIFICATIONS\n        });\n    }\n\n    public showMessage(message: string, successCallback, cancelCallback, id?: string) {\n        this.addToast({\n            id: id || null,\n            type: 'message',\n            message: message,\n            actions: ['ok'],\n            successCallback: successCallback,\n            cancelCallback: cancelCallback\n        });\n    }\n\n     public showError(message: string, successCallback, cancelCallback, id: string, error: any) {\n        this.addToast({\n            id: id || null,\n            error: error,\n            type: 'error',\n            message: message || 'Unknown error.',\n            actions: ['ok'],\n            successCallback: successCallback,\n            cancelCallback: cancelCallback\n        });\n    }\n\n    public hideAllToasts(): void {\n        this._$mdToast.cancel();\n        this.toasts = [];\n    }\n\n    public clearToasts(type?: string) {\n        if (type) {\n            // pipAssert.isString(type, 'pipToasts.clearToasts: type should be a string');\n            this.removeToasts(type);\n        } else {\n            this._$mdToast.cancel();\n            this.toasts = [];\n        }\n    }\n\n}\n\n\n(() => {\n    angular\n        .module('pipToasts', ['ngMaterial', 'pipControls.Translate'])\n        .service('pipToasts', ToastService);\n})();\n","(function(module) {\ntry {\n  module = angular.module('pipControls.Templates');\n} catch (e) {\n  module = angular.module('pipControls.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('color_picker/color_picker.html',\n    '<ul class=\"pip-color-picker {{vm.class}}\" pip-selected=\"vm.currentColorIndex\" pip-enter-space-press=\"vm.enterSpacePress($event)\"><li tabindex=\"-1\" ng-repeat=\"color in vm.colors track by color\"><md-button tabindex=\"-1\" class=\"md-icon-button pip-selectable\" ng-click=\"vm.selectColor($index)\" aria-label=\"color\" ng-disabled=\"vm.disabled()\"><md-icon ng-style=\"{\\'color\\': color}\" md-svg-icon=\"icons:{{ color == vm.currentColor ? \\'circle\\' : \\'radio-off\\' }}\"></md-icon></md-button></li></ul>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipControls.Templates');\n} catch (e) {\n  module = angular.module('pipControls.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('popover/popover.html',\n    '<div ng-if=\"vm.templateUrl\" class=\"pip-popover flex layout-column\" ng-click=\"vm.onPopoverClick($event)\" ng-include=\"vm.templateUrl\"></div><div ng-if=\"vm.template\" class=\"pip-popover\" ng-click=\"vm.onPopoverClick($event)\"></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipControls.Templates');\n} catch (e) {\n  module = angular.module('pipControls.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('progress/routing_progress.html',\n    '<div class=\"pip-routing-progress layout-column layout-align-center-center\" ng-show=\"vm.showProgress()\"><div class=\"loader\"><svg class=\"circular\" viewbox=\"25 25 50 50\"><circle class=\"path\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke-width=\"2\" stroke-miterlimit=\"10\"></circle></svg></div><img src=\"\" height=\"40\" width=\"40\" class=\"pip-img\"><md-progress-circular md-diameter=\"96\" class=\"fix-ie\"></md-progress-circular></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipControls.Templates');\n} catch (e) {\n  module = angular.module('pipControls.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('toast/toast.html',\n    '<md-toast class=\"md-action pip-toast\" ng-class=\"{\\'pip-error\\': vm.toast.type==\\'error\\', \\'pip-column-toast\\': vm.toast.actions.length > 1 || vm.actionLenght > 4, \\'pip-no-action-toast\\': vm.actionLenght == 0}\" style=\"height:initial; max-height: initial;\"><span class=\"flex-var pip-text\" ng-bind-html=\"vm.message\"></span><div class=\"layout-row layout-align-end-start pip-actions\" ng-if=\"vm.actions.length > 0 || (vm.toast.type==\\'error\\' && vm.toast.error)\"><div class=\"flex\" ng-if=\"vm.toast.actions.length > 1\"></div><md-button class=\"flex-fixed pip-toast-button\" ng-if=\"vm.toast.type==\\'error\\' && vm.toast.error && vm.showDetails\" ng-click=\"vm.onDetails()\">Details</md-button><md-button class=\"flex-fixed pip-toast-button\" ng-click=\"vm.onAction(action)\" ng-repeat=\"action in vm.actions\" aria-label=\"{{::action| translate}}\">{{::action| translate}}</md-button></div></md-toast>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-controls-html.min.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvY29sb3JfcGlja2VyL2NvbG9yX3BpY2tlci50cyIsInNyYy9jb250cm9scy50cyIsInNyYy9kZXBlbmRlbmNpZXMvdHJhbnNsYXRlLnRzIiwic3JjL2ltYWdlX3NsaWRlci9pbWFnZV9zbGlkZXIudHMiLCJzcmMvaW1hZ2Vfc2xpZGVyL2ltYWdlX3NsaWRlcl9zZXJ2aWNlLnRzIiwic3JjL2ltYWdlX3NsaWRlci9zbGlkZXJfYnV0dG9uLnRzIiwic3JjL2ltYWdlX3NsaWRlci9zbGlkZXJfaW5kaWNhdG9yLnRzIiwic3JjL21hcmtkb3duL21hcmtkb3duLnRzIiwic3JjL3BvcG92ZXIvcG9wb3Zlci50cyIsInNyYy9wb3BvdmVyL3BvcG92ZXJfc2VydmljZS50cyIsInNyYy9wcm9ncmVzcy9yb3V0aW5nX3Byb2dyZXNzLnRzIiwic3JjL3RvYXN0L3RvYXN0cy50cyIsInRlbXAvcGlwLXdlYnVpLWNvbnRyb2xzLWh0bWwubWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNhQSxJQUFNLGNBQWMsR0FBRyxDQUFDLFFBQVEsRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBRTlGO0lBWUksK0JBQ0ksTUFBaUIsRUFDakIsUUFBUSxFQUNSLE1BQU0sRUFDTixRQUFRO1FBQ1IsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7UUFDMUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFFdEIsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQztRQUNoQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQztZQUM3QixDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxHQUFHLGNBQWMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDM0gsSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksSUFBSSxDQUFDO1FBQ3ZELElBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkUsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNoRSxJQUFJLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxLQUFLLENBQUM7SUFDMUQsQ0FBQztJQUVNLDBDQUFVLEdBQWpCLFVBQWtCLE9BQVk7UUFDMUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsWUFBWSxDQUFDLE1BQU0sS0FBSyxDQUFDO1lBQ2xHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxZQUFZLEdBQUcsY0FBYyxDQUFDO1FBQ3BELElBQUksQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFFTSx3Q0FBUSxHQUFmO1FBQ0ksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDbEIsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDO1FBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBQUEsQ0FBQztJQUVLLDJDQUFXLEdBQWxCLFVBQW1CLEtBQWE7UUFBaEMsaUJBYUM7UUFaRyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLE1BQU0sQ0FBQztRQUNYLENBQUM7UUFDRCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDO1FBQy9CLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ1gsS0FBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUMxQixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ25CLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUN2QixDQUFDO0lBQ0wsQ0FBQztJQUFBLENBQUM7SUFFSywrQ0FBZSxHQUF0QixVQUF1QixLQUFLO1FBQ3hCLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFBQSxDQUFDO0lBRU4sNEJBQUM7QUFBRCxDQTlEQSxBQThEQyxJQUFBO0FBOURZLHNEQUFxQjtBQWdFbEMsSUFBTSxjQUFjLEdBQUc7SUFDbkIsUUFBUSxFQUFFO1FBQ04sVUFBVSxFQUFFLGNBQWM7UUFDMUIsTUFBTSxFQUFFLFlBQVk7UUFDcEIsWUFBWSxFQUFFLFVBQVU7UUFDeEIsV0FBVyxFQUFFLFlBQVk7S0FDNUI7SUFDRCxXQUFXLEVBQUUsZ0NBQWdDO0lBQzdDLFVBQVUsRUFBRSxxQkFBcUI7SUFDakMsWUFBWSxFQUFFLElBQUk7Q0FDckIsQ0FBQTtBQUVELE9BQU87S0FDRixNQUFNLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0tBQ25ELFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxjQUFjLENBQUMsQ0FBQzs7O0FDM0ZqRCxDQUFDO0lBQ0csWUFBWSxDQUFDO0lBRWIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUU7UUFDMUIsYUFBYTtRQUNiLGdCQUFnQjtRQUNoQixvQkFBb0I7UUFDcEIsWUFBWTtRQUNaLGdCQUFnQjtRQUNoQixXQUFXO1FBQ1gsdUJBQXVCO0tBQzFCLENBQUMsQ0FBQztBQUVQLENBQUMsQ0FBQyxFQUFFLENBQUM7OztBQ2JMLENBQUM7SUFDRyxZQUFZLENBQUM7SUFFYixJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLHVCQUF1QixFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRTdELFVBQVUsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLFVBQVUsU0FBUztRQUM5QyxJQUFJLFlBQVksR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQztjQUMxQyxTQUFTLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUUzQyxNQUFNLENBQUMsVUFBVSxHQUFHO1lBQ2hCLE1BQU0sQ0FBQyxZQUFZLEdBQUksWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ3BFLENBQUMsQ0FBQTtJQUNMLENBQUMsQ0FBQyxDQUFDO0FBRVAsQ0FBQyxDQUFDLEVBQUUsQ0FBQzs7O0FDZEw7SUFvQkksa0NBQ0ksTUFBaUIsRUFDakIsUUFBUSxFQUNSLE1BQU0sRUFDTixNQUF3QixFQUN4QixRQUFpQyxFQUNqQyxTQUFtQyxFQUNuQyxjQUFjO1FBUGxCLGlCQTRDQztRQXpETyxXQUFNLEdBQVcsQ0FBQyxDQUFDO1FBSW5CLHFCQUFnQixHQUFHLElBQUksQ0FBQztRQUt6QixlQUFVLEdBQVcsQ0FBQyxDQUFDO1FBYTFCLElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDcEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztRQUM1QyxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztRQUM1QixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztRQUV4QyxRQUFRLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDdEMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFakQsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRWhCLFFBQVEsQ0FBQztZQUNMLEtBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1lBQ3JELEVBQUUsQ0FBQyxDQUFDLEtBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzFCLENBQUMsQ0FBQyxLQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzVDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUVyQixJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUM7WUFDekIsY0FBYyxDQUFDLE9BQU8sQ0FBQyxLQUFJLENBQUMsS0FBSyxFQUFFLEtBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSSxDQUFDLE1BQU0sRUFBRSxLQUFJLENBQUMsU0FBUyxFQUFFLEtBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUMvRixLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUksQ0FBQyxTQUFTLENBQUM7WUFDN0IsS0FBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3BCLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUVSLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFBO1FBQUMsQ0FBQztRQUVuRSxRQUFRLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRTtZQUNwQixLQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDcEIsY0FBYyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUM7SUFFUCxDQUFDO0lBRU0sNENBQVMsR0FBaEI7UUFDSSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsS0FBSyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDL0UsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7UUFDekIsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFTSw0Q0FBUyxHQUFoQjtRQUNJLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDakYsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7UUFDekIsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFTyxpREFBYyxHQUF0QixVQUF1QixTQUFpQjtRQUNwQyxFQUFFLENBQUMsQ0FBQyxTQUFTLEtBQUssSUFBSSxDQUFDLE1BQU0sSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuRSxNQUFNLENBQUM7UUFDWCxDQUFDO1FBRUQsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUM1RCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVPLDJDQUFRLEdBQWhCO1FBQ0ksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7WUFBQyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDbkUsQ0FBQztJQUVPLGdEQUFhLEdBQXJCO1FBQUEsaUJBTUM7UUFMRyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7WUFDakMsS0FBSSxDQUFDLFNBQVMsR0FBRyxLQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsS0FBSyxLQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsS0FBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7WUFDL0UsS0FBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7WUFDekIsS0FBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3RCLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFTywrQ0FBWSxHQUFwQjtRQUNJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRU8sa0RBQWUsR0FBdkI7UUFDSSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFDTCwrQkFBQztBQUFELENBL0dBLEFBK0dDLElBQUE7QUFFRCxDQUFDO0lBRUc7UUFDSSxNQUFNLENBQUM7WUFDSCxLQUFLLEVBQUU7Z0JBQ0gsV0FBVyxFQUFFLGdCQUFnQjtnQkFDN0IsSUFBSSxFQUFFLG1CQUFtQjtnQkFDekIsUUFBUSxFQUFFLHVCQUF1QjthQUNwQztZQUNELGdCQUFnQixFQUFFLElBQUk7WUFDdEIsVUFBVSxFQUFFLHdCQUF3QjtZQUNwQyxZQUFZLEVBQUUsSUFBSTtTQUNyQixDQUFDO0lBQ04sQ0FBQztJQUdELE9BQU87U0FDRixNQUFNLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxvQkFBb0IsRUFBRSx3QkFBd0IsQ0FBQyxDQUFDO1NBQzdGLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxjQUFjLENBQUMsQ0FBQztBQUNyRCxDQUFDLENBQUMsRUFBRSxDQUFDOzs7QUMzSEw7SUFLSSw0QkFBWSxRQUFpQztRQUhyQyx1QkFBa0IsR0FBVyxHQUFHLENBQUM7UUFDakMsYUFBUSxHQUFHLEVBQUUsQ0FBQztRQUdsQixJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztJQUM5QixDQUFDO0lBRU0sMkNBQWMsR0FBckIsVUFBc0IsUUFBZ0IsRUFBRSxXQUFXO1FBQy9DLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsV0FBVyxDQUFDO0lBQzFDLENBQUM7SUFFTSx5Q0FBWSxHQUFuQixVQUFvQixRQUFnQjtRQUNoQyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVNLDJDQUFjLEdBQXJCLFVBQXNCLFFBQWdCO1FBQ2xDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFTSx5Q0FBWSxHQUFuQixVQUFvQixTQUFTLEVBQUUsU0FBUztRQUNwQyxTQUFTLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRS9CLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDWCxTQUFTLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDNUUsU0FBUyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDM0QsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1osQ0FBQztJQUVNLHlDQUFZLEdBQW5CLFVBQW9CLFNBQVMsRUFBRSxTQUFTO1FBQ3BDLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDWCxTQUFTLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNwRCxTQUFTLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDaEYsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ1osQ0FBQztJQUVNLG9DQUFPLEdBQWQsVUFBZSxJQUFZLEVBQUUsTUFBYSxFQUFFLFFBQWdCLEVBQUUsU0FBaUIsRUFBRSxTQUFpQjtRQUM5RixJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQy9CLFVBQVUsR0FBVyxTQUFTLEVBQzlCLFNBQVMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFFdEMsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDdEIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBRWxGLEVBQUUsQ0FBQyxDQUFDLFNBQVMsSUFBSSxDQUFDLFNBQVMsS0FBSyxNQUFNLElBQUksU0FBUyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDOUQsRUFBRSxDQUFDLENBQUMsU0FBUyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUM7b0JBQ3ZCLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO2dCQUM1QyxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO2dCQUM1QyxDQUFDO1lBQ0wsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLEVBQUUsQ0FBQyxDQUFDLFNBQVMsSUFBSSxTQUFTLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztvQkFDcEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7Z0JBQzVDLENBQUM7Z0JBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ0osSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7Z0JBQzVDLENBQUM7WUFDTCxDQUFDO1FBQ0wsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osU0FBUyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDdkQsU0FBUyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDeEQsQ0FBQztJQUNMLENBQUM7SUFFTCx5QkFBQztBQUFELENBaEVBLEFBZ0VDLElBQUE7QUFHRCxDQUFDO0lBQ0csWUFBWSxDQUFDO0lBQ2IsT0FBTztTQUNGLE1BQU0sQ0FBQyx3QkFBd0IsRUFBRSxFQUFFLENBQUM7U0FDcEMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLGtCQUFrQixDQUFDLENBQUM7QUFDdkQsQ0FBQyxDQUFDLEVBQUUsQ0FBQzs7O0FDakZMLENBQUM7SUFDRyxZQUFZLENBQUM7SUFFYixJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRXZELFVBQVUsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLEVBQ2xDO1FBQ0ksTUFBTSxDQUFDO1lBQ0gsS0FBSyxFQUFFLEVBQUU7WUFDVCxVQUFVLEVBQUUsVUFBVSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsY0FBYztnQkFDbEUsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFDM0MsUUFBUSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBRWxELFFBQVEsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFO29CQUNqQixFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7d0JBQ3JCLE1BQU0sQ0FBQztvQkFDWCxDQUFDO29CQUVELGNBQWMsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDO2dCQUNqRSxDQUFDLENBQUMsQ0FBQztZQUNQLENBQUM7U0FDSixDQUFDO0lBQ04sQ0FBQyxDQUNKLENBQUM7QUFFTixDQUFDLENBQUMsRUFBRSxDQUFDOzs7QUN6QkwsQ0FBQztJQUNHLFlBQVksQ0FBQztJQUViLElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsb0JBQW9CLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFMUQsVUFBVSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsRUFDckM7UUFDSSxNQUFNLENBQUM7WUFDSCxLQUFLLEVBQUUsS0FBSztZQUNaLFVBQVUsRUFBRSxVQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxjQUFjO2dCQUN6RCxJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUM3QyxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFFaEQsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7Z0JBQ2xDLFFBQVEsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFHO29CQUNsQixFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsSUFBSSxPQUFPLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ3RDLE1BQU0sQ0FBQztvQkFDWCxDQUFDO29CQUNELGNBQWMsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDdkUsQ0FBQyxDQUFDLENBQUM7WUFDUCxDQUFDO1NBQ0osQ0FBQztJQUNOLENBQUMsQ0FDSixDQUFDO0FBRU4sQ0FBQyxDQUFDLEVBQUUsQ0FBQzs7O0FDdkJMLGdCQUFnQixTQUFTO0lBQ3JCLElBQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxJQUFJLENBQUM7SUFFMUYsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUNmLFlBQVksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFO1lBQy9CLHNCQUFzQixFQUFFLGNBQWM7WUFDdEMsV0FBVyxFQUFFLFdBQVc7WUFDeEIsV0FBVyxFQUFFLFdBQVc7WUFDeEIsVUFBVSxFQUFFLFVBQVU7WUFDdEIsVUFBVSxFQUFFLFVBQVU7WUFDdEIsTUFBTSxFQUFFLE1BQU07U0FDakIsQ0FBQyxDQUFDO1FBQ0gsWUFBWSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUU7WUFDL0Isc0JBQXNCLEVBQUUsV0FBVztZQUNuQyxXQUFXLEVBQUUsUUFBUTtZQUNyQixXQUFXLEVBQUUsV0FBVztZQUN4QixVQUFVLEVBQUUsYUFBYTtZQUN6QixVQUFVLEVBQUUsaUJBQWlCO1lBQzdCLE1BQU0sRUFBRSxPQUFPO1NBQ2xCLENBQUMsQ0FBQztJQUNQLENBQUM7QUFDTCxDQUFDO0FBRUQ7SUFZSSw0QkFDSSxNQUFzQixFQUN0QixNQUE2QixFQUM3QixNQUFNLEVBQ04sUUFBUSxFQUNSLFNBQVM7UUFFVCxJQUFJLENBQUMsYUFBYSxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDMUYsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7UUFDNUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7UUFDMUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVNLHNDQUFTLEdBQWhCO1FBRUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFMUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUU7WUFDakMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztnQkFBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDL0QsQ0FBQyxDQUFDLENBQUM7UUFHSCxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUU1QyxDQUFDO0lBRU0sdUNBQVUsR0FBakIsVUFBa0IsT0FBWTtRQUMxQixJQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsWUFBWSxDQUFDO1FBRTdDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2YsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUN6QixJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQztnQkFDckIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDOUIsQ0FBQztRQUNMLENBQUM7SUFDTCxDQUFDO0lBRU8sZ0RBQW1CLEdBQTNCLFVBQTRCLEtBQUs7UUFDN0IsSUFBSSxZQUFZLEdBQUcsRUFBRSxFQUNqQixXQUFXLEdBQUcsRUFBRSxDQUFDO1FBRXJCLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFVBQVUsTUFBTTtZQUMxQixFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDeEMsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7b0JBQ2xELFlBQVksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO2dCQUN4RSxDQUFDO2dCQUVELEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3ZDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUM5QixZQUFZLElBQUksV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQztvQkFDcEQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQzt3QkFDbkIsWUFBWSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDbEUsQ0FBQztZQUNMLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxZQUFZLENBQUM7SUFDeEIsQ0FBQztJQUVPLHFDQUFRLEdBQWhCLFVBQWlCLEtBQUs7UUFDbEIsSUFBSSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxDQUFDO1FBRWhELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25CLEdBQUcsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxVQUFVLElBQVM7Z0JBQ25DLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLE1BQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQzdDLENBQUMsQ0FBQyxDQUFDO1lBRUgsVUFBVSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsRSxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixVQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLENBQUM7UUFFRCxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDakUsU0FBUyxHQUFHLFNBQVMsSUFBSSxVQUFVLElBQUksVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDN0QsT0FBTyxHQUFHO1lBQ04sR0FBRyxFQUFFLElBQUk7WUFDVCxNQUFNLEVBQUUsSUFBSTtZQUNaLE1BQU0sRUFBRSxJQUFJO1lBQ1osUUFBUSxFQUFFLElBQUk7WUFDZCxRQUFRLEVBQUUsSUFBSTtZQUNkLFVBQVUsRUFBRSxJQUFJO1lBQ2hCLFdBQVcsRUFBRSxLQUFLO1NBQ3JCLENBQUM7UUFDRixVQUFVLEdBQUcsTUFBTSxDQUFDLFVBQVUsSUFBSSxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDL0MsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztZQUNaLE1BQU0sR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUMvQixDQUFDO1FBRUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLEdBQUcsOEJBQThCO1lBQ25GLHdDQUF3QyxHQUFHLE1BQU0sR0FBRyxNQUFNO1lBQzFELG1EQUFtRCxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU87WUFDcEYsNkJBQTZCLEdBQUcsR0FBRyxDQUFDLEdBQUcsVUFBVSxHQUFHLFFBQVEsQ0FBQyxDQUFDO1FBQ2xFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDakQsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDN0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsd0NBQXdDLENBQUMsQ0FBQztRQUNwRSxDQUFDO0lBQ0wsQ0FBQztJQUNMLHlCQUFDO0FBQUQsQ0FuSEEsQUFtSEMsSUFBQTtBQUVELENBQUM7SUFDRyxZQUFZLENBQUM7SUFFYixJQUFNLGlCQUFpQixHQUFHO1FBQ3RCLFVBQVUsRUFBRSxrQkFBa0I7UUFDOUIsUUFBUSxFQUFFO1lBQ04sSUFBSSxFQUFFLFVBQVU7WUFDaEIsTUFBTSxFQUFFLFdBQVc7WUFDbkIsS0FBSyxFQUFFLGdCQUFnQjtZQUN2QixNQUFNLEVBQUUsYUFBYTtTQUN4QjtLQUNKLENBQUE7SUFFRCxPQUFPLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ3hDLEdBQUcsQ0FBQyxNQUFNLENBQUM7U0FDWCxTQUFTLENBQUMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLENBQUM7QUFDckQsQ0FBQyxDQUFDLEVBQUUsQ0FBQzs7Ozs7QUM3Skw7SUFnQkksMkJBQ0ksTUFBaUIsRUFDakIsVUFBVSxFQUNWLFFBQVEsRUFDUixRQUFRLEVBQ1IsUUFBUTtRQUxaLGlCQWlDQztRQXpCTSxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUMxQixJQUFJLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxXQUFXLENBQUM7UUFDaEQsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDO1FBQzFDLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUN4QyxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFDeEMsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsVUFBVSxDQUFDO1FBQ3pDLElBQUksQ0FBQyxjQUFjLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLGNBQWMsQ0FBQztRQUN0RCxJQUFJLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLHNCQUFzQixFQUFDLGNBQU8sS0FBSSxDQUFDLGFBQWEsRUFBRSxDQUFBLENBQUEsQ0FBQyxDQUFDLENBQUM7UUFDN0UsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFVBQVUsS0FBSyxLQUFLLEdBQUcsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFFN0YsUUFBUSxDQUFDO1lBQ0osS0FBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2hCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUM1QixLQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQzNELFFBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN2RCxDQUFDO1lBRUQsS0FBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2pCLENBQUMsQ0FBQyxDQUFDO1FBRUgsUUFBUSxDQUFDLGNBQVEsS0FBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzVDLFVBQVUsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsY0FBUSxLQUFJLENBQUMsUUFBUSxFQUFFLENBQUEsQ0FBQSxDQUFDLENBQUMsQ0FBQztRQUM3RCxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLGNBQVEsS0FBSSxDQUFDLFFBQVEsRUFBRSxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFbkQsQ0FBQztJQUVNLHlDQUFhLEdBQXBCO1FBQ0ksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7WUFDdEIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQzFCLENBQUM7UUFDRCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVNLHdDQUFZLEdBQW5CO1FBQUEsaUJBS0M7UUFKRyxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ1gsS0FBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNsQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWixDQUFDO0lBRU0sMENBQWMsR0FBckIsVUFBc0IsRUFBRTtRQUNwQixFQUFFLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUdPLGdDQUFJLEdBQVo7UUFDSSxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN4QyxDQUFDLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNuQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNmLElBQUksQ0FBQyxTQUFTLENBQUM7Z0JBQ1gsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQ3hCLENBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckIsQ0FBQztJQUNMLENBQUM7SUFFTyxvQ0FBUSxHQUFoQjtRQUNJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2YsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFDekIsR0FBRyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFDdEIsS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFDdkIsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFDekIsUUFBUSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFDOUIsU0FBUyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFDaEMsT0FBTyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBRXhELEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ04sT0FBTztxQkFDRixHQUFHLENBQUMsV0FBVyxFQUFFLFFBQVEsR0FBRyxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7cUJBQ2xELEdBQUcsQ0FBQyxZQUFZLEVBQUUsU0FBUyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO3FCQUN6RCxHQUFHLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUM7cUJBQ25ELEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEdBQUcsR0FBRyxNQUFNLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDM0MsQ0FBQztRQUNMLENBQUM7SUFDTCxDQUFDO0lBRU8sb0NBQVEsR0FBaEI7UUFDSSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN6RixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFTyxzQ0FBVSxHQUFsQjtRQUNJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztZQUFDLE1BQU0sQ0FBQztRQUFDLENBQUM7UUFDckMsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQ3ZELEtBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUNsQyxNQUFNLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFDcEMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQ3RDLGFBQWEsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RGLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDakcsQ0FBQztJQUNMLHdCQUFDO0FBQUQsQ0FuSEEsQUFtSEMsSUFBQTtBQW5IWSw4Q0FBaUI7QUFxSDlCLENBQUM7SUFDRyxvQkFBb0IsTUFBVztRQUMzQixVQUFVLENBQUM7UUFFVCxNQUFNLENBQUM7WUFDRCxRQUFRLEVBQUUsSUFBSTtZQUNkLEtBQUssRUFBRSxJQUFJO1lBQ1gsV0FBVyxFQUFFLHNCQUFzQjtZQUNuQyxVQUFVLEVBQUUsaUJBQWlCO1lBQzdCLFlBQVksRUFBRSxJQUFJO1NBQ3JCLENBQUM7SUFDVixDQUFDO0lBRUQsT0FBTztTQUNGLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1NBQzVDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFFN0MsQ0FBQyxDQUFDLEVBQUUsQ0FBQzs7Ozs7QUN2SUw7SUFTSSx3QkFDSSxRQUFRLEVBQ1IsVUFBVSxFQUNWLFFBQVE7UUFFTCxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUMxQixJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQztRQUM5QixJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUMxQixJQUFJLENBQUMsZUFBZSxHQUFHLHdGQUF3RjtZQUMxRyx3RUFBd0UsQ0FBQztJQUNyRixDQUFDO0lBRU0sNkJBQUksR0FBWCxVQUFZLENBQUM7UUFDVCxJQUFJLE9BQU8sRUFBRSxLQUFnQixFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUM7UUFFL0MsT0FBTyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwQixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQUMsTUFBTSxDQUFDO1FBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDWixLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNoQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNyQyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQ3pCLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ2hDLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN0RCxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFTSw2QkFBSSxHQUFYO1FBQ0ksSUFBSSxlQUFlLEdBQUcsQ0FBQyxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFDakQsZUFBZSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ1gsZUFBZSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzdCLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNaLENBQUM7SUFFTSwrQkFBTSxHQUFiO1FBQ0ksSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBQ0wscUJBQUM7QUFBRCxDQTlDQSxBQThDQyxJQUFBO0FBOUNZLHdDQUFjO0FBaUQzQixDQUFDO0lBQ0csT0FBTztTQUNGLE1BQU0sQ0FBQyxvQkFBb0IsRUFBRSxFQUFFLENBQUM7U0FDaEMsT0FBTyxDQUFDLG1CQUFtQixFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBQ3RELENBQUMsQ0FBQyxFQUFFLENBQUM7OztBQ3JETDtJQU9JLDJCQUNJLE1BQWlCLEVBQ2pCLFFBQVE7UUFHUixJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUMxQixJQUFJLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRU0scUNBQVMsR0FBaEI7UUFDSSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFTSw2Q0FBaUIsR0FBeEI7UUFDSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDMUMsQ0FBQztJQUNMLENBQUM7SUFDTCx3QkFBQztBQUFELENBM0JBLEFBMkJDLElBQUE7QUFHRCxDQUFDO0lBRUcsSUFBTSxlQUFlLEdBQUc7UUFDaEIsT0FBTyxFQUFFLElBQUk7UUFDYixRQUFRLEVBQUU7WUFDTixZQUFZLEVBQUUsR0FBRztZQUNqQixPQUFPLEVBQUUsR0FBRztTQUNmO1FBQ0QsV0FBVyxFQUFFLGdDQUFnQztRQUM3QyxVQUFVLEVBQUUsaUJBQWlCO1FBQzdCLFlBQVksRUFBRSxJQUFJO0tBQ3pCLENBQUE7SUFHRCxPQUFPO1NBQ0YsTUFBTSxDQUFDLG9CQUFvQixFQUFFLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDNUMsU0FBUyxDQUFDLG9CQUFvQixFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBRTFELENBQUMsQ0FBQyxFQUFFLENBQUM7OztBQ3JDTDtJQVVJLHlCQUNJLFFBQXdDLEVBQ3hDLEtBQWdCLEVBQ2hCLFNBQVM7UUFFTCxJQUFJLENBQUMsc0JBQXNCLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQztjQUM5RCxTQUFTLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ3BELElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO1FBQzFCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztRQUM3QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7UUFDN0IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFFbkIsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QixJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQztRQUMxQixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDL0YsQ0FBQztRQUVELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixJQUFJLElBQUksQ0FBQztJQUUvRCxDQUFDO0lBRU8sbUNBQVMsR0FBaEI7UUFDRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3RCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUM7WUFDOUIsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FDaEM7Z0JBQ0ksS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSztnQkFDdkIsRUFBRSxFQUFFLElBQUk7YUFDWCxFQUNELE9BQU8sQ0FBQyxJQUFJLEVBQ1osT0FBTyxDQUFDLElBQUksQ0FDWCxDQUFDO1FBQ04sQ0FBQztJQUNMLENBQUM7SUFFTSxrQ0FBUSxHQUFmLFVBQWdCLE1BQU07UUFDbEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQ25CO1lBQ0ksTUFBTSxFQUFFLE1BQU07WUFDZCxFQUFFLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ2pCLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztTQUN4QixDQUFDLENBQUM7SUFFUCxDQUFDO0lBQ0wsc0JBQUM7QUFBRCxDQXZEQSxBQXVEQyxJQUFBO0FBaUJEO0lBU0ksc0JBQ0ksVUFBZ0MsRUFDaEMsUUFBd0M7UUFGNUMsaUJBU0M7UUFqQk8saUJBQVksR0FBVyxLQUFLLENBQUM7UUFDN0IsK0JBQTBCLEdBQVcsS0FBSyxDQUFDO1FBQzNDLFdBQU0sR0FBZ0IsRUFBRSxDQUFDO1FBRXpCLFdBQU0sR0FBUSxFQUFFLENBQUM7UUFRckIsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7UUFFMUIsVUFBVSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsRUFBRSxjQUFPLEtBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFBLENBQUEsQ0FBQyxDQUFDLENBQUM7UUFDM0UsVUFBVSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxjQUFPLEtBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQSxDQUFBLENBQUMsQ0FBQyxDQUFDO1FBQ2pFLFVBQVUsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsY0FBTyxLQUFJLENBQUMsYUFBYSxFQUFFLENBQUEsQ0FBQSxDQUFDLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRU0sb0NBQWEsR0FBcEI7UUFDSSxJQUFJLEtBQWdCLENBQUM7UUFFckIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QixLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDekIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQixDQUFDO0lBQ0wsQ0FBQztJQUdPLGdDQUFTLEdBQWhCLFVBQWlCLEtBQWdCO1FBQWpDLGlCQXNCQTtRQXJCRyxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztRQUUxQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztZQUNoQixXQUFXLEVBQUUsa0JBQWtCO1lBQy9CLFNBQVMsRUFBRSxLQUFLLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxZQUFZO1lBQzlDLFFBQVEsRUFBRSxhQUFhO1lBQ3ZCLFVBQVUsRUFBRSxlQUFlO1lBQzNCLFlBQVksRUFBRSxJQUFJO1lBQ2xCLE1BQU0sRUFBRTtnQkFDSixLQUFLLEVBQUUsSUFBSSxDQUFDLFlBQVk7Z0JBQ3hCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTthQUN0QjtTQUNKLENBQUM7YUFDRCxJQUFJLENBQ0QsVUFBQyxNQUFjO1lBQ1gsS0FBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ25DLENBQUMsRUFDRCxVQUFDLE1BQWM7WUFDWCxLQUFJLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkMsQ0FBQyxDQUNKLENBQUM7SUFDTixDQUFDO0lBRU8sNENBQXFCLEdBQTdCLFVBQThCLE1BQWM7UUFDeEMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1lBQ25DLElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLENBQUM7UUFDRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztRQUN6QixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUVPLHdDQUFpQixHQUF6QixVQUEwQixNQUFjO1FBQ3BDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztZQUNwQyxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QyxDQUFDO1FBQ0QsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDekIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFTSwrQkFBUSxHQUFmLFVBQWdCLEtBQUs7UUFDakIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDOUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQixDQUFDO0lBQ0wsQ0FBQztJQUVNLG1DQUFZLEdBQW5CLFVBQW9CLElBQVk7UUFDNUIsSUFBSSxNQUFNLEdBQVUsRUFBRSxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxVQUFDLEtBQUs7WUFDdEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDckMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN2QixDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVNLHVDQUFnQixHQUF2QixVQUF3QixFQUFVO1FBQzlCLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUMsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFTSxtQ0FBWSxHQUFuQixVQUFvQixFQUFVO1FBQzFCLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBQyxFQUFFLEVBQUUsRUFBRSxFQUFDLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRU0sMkNBQW9CLEdBQTNCLGNBQStCLENBQUM7SUFFekIsb0NBQWEsR0FBcEI7UUFDSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFTSx1Q0FBZ0IsR0FBdkIsVUFBd0IsT0FBZSxFQUFFLE9BQWlCLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxFQUFVO1FBQ25HLElBQUksQ0FBQyxRQUFRLENBQUM7WUFDVixFQUFFLEVBQUUsRUFBRSxJQUFJLElBQUk7WUFDZCxJQUFJLEVBQUUsY0FBYztZQUNwQixPQUFPLEVBQUUsT0FBTztZQUNoQixPQUFPLEVBQUUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQzFCLGVBQWUsRUFBRSxlQUFlO1lBQ2hDLGNBQWMsRUFBRSxjQUFjO1lBQzlCLFFBQVEsRUFBRSxJQUFJLENBQUMsMEJBQTBCO1NBQzVDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTSxrQ0FBVyxHQUFsQixVQUFtQixPQUFlLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxFQUFXO1FBQzVFLElBQUksQ0FBQyxRQUFRLENBQUM7WUFDVixFQUFFLEVBQUUsRUFBRSxJQUFJLElBQUk7WUFDZCxJQUFJLEVBQUUsU0FBUztZQUNmLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQztZQUNmLGVBQWUsRUFBRSxlQUFlO1lBQ2hDLGNBQWMsRUFBRSxjQUFjO1NBQ2pDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTyxnQ0FBUyxHQUFoQixVQUFpQixPQUFlLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxFQUFVLEVBQUUsS0FBVTtRQUN0RixJQUFJLENBQUMsUUFBUSxDQUFDO1lBQ1YsRUFBRSxFQUFFLEVBQUUsSUFBSSxJQUFJO1lBQ2QsS0FBSyxFQUFFLEtBQUs7WUFDWixJQUFJLEVBQUUsT0FBTztZQUNiLE9BQU8sRUFBRSxPQUFPLElBQUksZ0JBQWdCO1lBQ3BDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQztZQUNmLGVBQWUsRUFBRSxlQUFlO1lBQ2hDLGNBQWMsRUFBRSxjQUFjO1NBQ2pDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTSxvQ0FBYSxHQUFwQjtRQUNJLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVNLGtDQUFXLEdBQWxCLFVBQW1CLElBQWE7UUFDNUIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUVQLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUN4QixJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNyQixDQUFDO0lBQ0wsQ0FBQztJQUVMLG1CQUFDO0FBQUQsQ0F6SkEsQUF5SkMsSUFBQTtBQUdELENBQUM7SUFDRyxPQUFPO1NBQ0YsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLFlBQVksRUFBRSx1QkFBdUIsQ0FBQyxDQUFDO1NBQzVELE9BQU8sQ0FBQyxXQUFXLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDNUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQzs7O0FDclBMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiZXhwb3J0IGludGVyZmFjZSBJQ29sb3JQaWNrZXIge1xuICAgIGNsYXNzOiBzdHJpbmc7XG4gICAgY29sb3JzOiBzdHJpbmdbXTtcbiAgICBjdXJyZW50Q29sb3I6IHN0cmluZztcbiAgICBjdXJyZW50Q29sb3JJbmRleDogbnVtYmVyO1xuICAgIG5nRGlzYWJsZWQ6IEZ1bmN0aW9uO1xuICAgIGNvbG9yQ2hhbmdlOiBGdW5jdGlvbjtcblxuICAgIGVudGVyU3BhY2VQcmVzcyhldmVudCk6IHZvaWQ7XG4gICAgZGlzYWJsZWQoKTogYm9vbGVhbjtcbiAgICBzZWxlY3RDb2xvcihpbmRleDogbnVtYmVyKTtcbn1cblxuY29uc3QgREVGQVVMVF9DT0xPUlMgPSBbJ3B1cnBsZScsICdsaWdodGdyZWVuJywgJ2dyZWVuJywgJ2RhcmtyZWQnLCAncGluaycsICd5ZWxsb3cnLCAnY3lhbiddO1xuXG5leHBvcnQgY2xhc3MgQ29sb3JQaWNrZXJDb250cm9sbGVyIGltcGxlbWVudHMgSUNvbG9yUGlja2VyIHtcblxuICAgIHByaXZhdGUgXyR0aW1lb3V0O1xuICAgIHByaXZhdGUgXyRzY29wZTogbmcuSVNjb3BlO1xuXG4gICAgcHVibGljIGNsYXNzOiBzdHJpbmc7XG4gICAgcHVibGljIGNvbG9yczogc3RyaW5nW107XG4gICAgcHVibGljIGN1cnJlbnRDb2xvcjogc3RyaW5nO1xuICAgIHB1YmxpYyBjdXJyZW50Q29sb3JJbmRleDogbnVtYmVyO1xuICAgIHB1YmxpYyBuZ0Rpc2FibGVkOiBGdW5jdGlvbjtcbiAgICBwdWJsaWMgY29sb3JDaGFuZ2U6IEZ1bmN0aW9uO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgICRzY29wZTogbmcuSVNjb3BlLFxuICAgICAgICAkZWxlbWVudCxcbiAgICAgICAgJGF0dHJzLFxuICAgICAgICAkdGltZW91dCkge1xuICAgICAgICB0aGlzLl8kdGltZW91dCA9ICR0aW1lb3V0O1xuICAgICAgICB0aGlzLl8kc2NvcGUgPSAkc2NvcGU7XG5cbiAgICAgICAgdGhpcy5jbGFzcyA9ICRhdHRycy5jbGFzcyB8fCAnJztcbiAgICAgICAgdGhpcy5jb2xvcnMgPSAhJHNjb3BlWyd2bSddWydjb2xvcnMnXSB8fCBcbiAgICAgICAgICAgICAgICBfLmlzQXJyYXkoJHNjb3BlWyd2bSddWydjb2xvcnMnXSkgJiYgJHNjb3BlWyd2bSddWydjb2xvcnMnXS5sZW5ndGggPT09IDAgPyBERUZBVUxUX0NPTE9SUyA6ICRzY29wZVsndm0nXVsnY29sb3JzJ107XG4gICAgICAgIHRoaXMuY29sb3JDaGFuZ2UgPSAkc2NvcGVbJ3ZtJ11bJ2NvbG9yQ2hhbmdlJ10gfHwgbnVsbDtcbiAgICAgICAgdGhpcy5jdXJyZW50Q29sb3IgPSAkc2NvcGVbJ3ZtJ11bJ2N1cnJlbnRDb2xvciddIHx8IHRoaXMuY29sb3JzWzBdO1xuICAgICAgICB0aGlzLmN1cnJlbnRDb2xvckluZGV4ID0gdGhpcy5jb2xvcnMuaW5kZXhPZih0aGlzLmN1cnJlbnRDb2xvcik7XG4gICAgICAgIHRoaXMubmdEaXNhYmxlZCA9ICRzY29wZVsndm0nXVsnbmdEaXNhYmxlZCddIHx8IGZhbHNlO1xuICAgIH1cblxuICAgIHB1YmxpYyAkb25DaGFuZ2VzKGNoYW5nZXM6IGFueSkge1xuICAgICAgICB0aGlzLmNvbG9ycyA9IF8uaXNBcnJheShjaGFuZ2VzWydjb2xvcnMnXS5jdXJyZW50VmFsdWUpICYmIGNoYW5nZXNbJ2NvbG9ycyddLmN1cnJlbnRWYWx1ZS5sZW5ndGggIT09IDAgPyBcbiAgICAgICAgICAgIGNoYW5nZXNbJ2NvbG9ycyddLmN1cnJlbnRWYWx1ZSA6IERFRkFVTFRfQ09MT1JTO1xuICAgICAgICB0aGlzLmN1cnJlbnRDb2xvciA9IGNoYW5nZXNbJ2N1cnJlbnRDb2xvciddLmN1cnJlbnRWYWx1ZSB8fCB0aGlzLmNvbG9yc1swXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh0aGlzLm5nRGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICBwdWJsaWMgc2VsZWN0Q29sb3IoaW5kZXg6IG51bWJlcikge1xuICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJyZW50Q29sb3JJbmRleCA9IGluZGV4O1xuICAgICAgICB0aGlzLmN1cnJlbnRDb2xvciA9IHRoaXMuY29sb3JzW3RoaXMuY3VycmVudENvbG9ySW5kZXhdO1xuICAgICAgICB0aGlzLl8kdGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl8kc2NvcGUuJGFwcGx5KCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLmNvbG9yQ2hhbmdlKSB7XG4gICAgICAgICAgICB0aGlzLmNvbG9yQ2hhbmdlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcHVibGljIGVudGVyU3BhY2VQcmVzcyhldmVudCk6IHZvaWQge1xuICAgICAgICB0aGlzLnNlbGVjdENvbG9yKGV2ZW50LmluZGV4KTtcbiAgICB9O1xuXG59XG5cbmNvbnN0IHBpcENvbG9yUGlja2VyID0ge1xuICAgIGJpbmRpbmdzOiB7XG4gICAgICAgIG5nRGlzYWJsZWQ6ICc8P25nRGlzYWJsZWQnLFxuICAgICAgICBjb2xvcnM6ICc8cGlwQ29sb3JzJyxcbiAgICAgICAgY3VycmVudENvbG9yOiAnPW5nTW9kZWwnLFxuICAgICAgICBjb2xvckNoYW5nZTogJzw/bmdDaGFuZ2UnXG4gICAgfSxcbiAgICB0ZW1wbGF0ZVVybDogJ2NvbG9yX3BpY2tlci9jb2xvcl9waWNrZXIuaHRtbCcsXG4gICAgY29udHJvbGxlcjogQ29sb3JQaWNrZXJDb250cm9sbGVyLFxuICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xufVxuXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgncGlwQ29sb3JQaWNrZXInLCBbJ3BpcENvbnRyb2xzLlRlbXBsYXRlcyddKVxuICAgIC5jb21wb25lbnQoJ3BpcENvbG9yUGlja2VyJywgcGlwQ29sb3JQaWNrZXIpOyIsIu+7vy8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBpbmdzL3RzZC5kLnRzXCIgLz5cblxuKCgpID0+IHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgncGlwQ29udHJvbHMnLCBbXG4gICAgICAgICdwaXBNYXJrZG93bicsXG4gICAgICAgICdwaXBDb2xvclBpY2tlcicsXG4gICAgICAgICdwaXBSb3V0aW5nUHJvZ3Jlc3MnLFxuICAgICAgICAncGlwUG9wb3ZlcicsXG4gICAgICAgICdwaXBJbWFnZVNsaWRlcicsXG4gICAgICAgICdwaXBUb2FzdHMnLFxuICAgICAgICAncGlwQ29udHJvbHMuVHJhbnNsYXRlJ1xuICAgIF0pO1xuXG59KSgpO1xuXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vdHlwaW5ncy90c2QuZC50c1wiIC8+XG5cbihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIHRoaXNNb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgncGlwQ29udHJvbHMuVHJhbnNsYXRlJywgW10pO1xuXG4gICAgdGhpc01vZHVsZS5maWx0ZXIoJ3RyYW5zbGF0ZScsIGZ1bmN0aW9uICgkaW5qZWN0b3IpIHtcbiAgICAgICAgdmFyIHBpcFRyYW5zbGF0ZSA9ICRpbmplY3Rvci5oYXMoJ3BpcFRyYW5zbGF0ZScpIFxuICAgICAgICAgICAgPyAkaW5qZWN0b3IuZ2V0KCdwaXBUcmFuc2xhdGUnKSA6IG51bGw7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBwaXBUcmFuc2xhdGUgID8gcGlwVHJhbnNsYXRlLnRyYW5zbGF0ZShrZXkpIHx8IGtleSA6IGtleTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG59KSgpO1xuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL3R5cGluZ3MvdHNkLmQudHNcIiAvPlxuXG5jbGFzcyBwaXBJbWFnZVNsaWRlckNvbnRyb2xsZXJ7XG5cbiAgICBwcml2YXRlIF8kYXR0cnM7XG4gICAgcHJpdmF0ZSBfJGludGVydmFsOiBhbmd1bGFyLklJbnRlcnZhbFNlcnZpY2U7XG4gICAgcHJpdmF0ZSBfJHNjb3BlOiBhbmd1bGFyLklTY29wZTtcblxuICAgIHByaXZhdGUgX2Jsb2NrczogYW55W107XG4gICAgcHJpdmF0ZSBfaW5kZXg6IG51bWJlciA9IDA7XG4gICAgcHJpdmF0ZSBfbmV3SW5kZXg6IG51bWJlcjtcbiAgICBwcml2YXRlIF9kaXJlY3Rpb246IHN0cmluZztcbiAgICBwcml2YXRlIF90eXBlOiBhbnk7XG4gICAgcHJpdmF0ZSBERUZBVUxUX0lOVEVSVkFMID0gNDUwMDtcbiAgICBwcml2YXRlIF9pbnRlcnZhbDtcbiAgICBwcml2YXRlIF90aW1lUHJvbWlzZXM7XG4gICAgcHJpdmF0ZSBfdGhyb3R0bGVkOiBGdW5jdGlvbjtcblxuICAgIHB1YmxpYyBzd2lwZVN0YXJ0OiBudW1iZXIgPSAwO1xuICAgIHB1YmxpYyBzbGlkZXJJbmRleDogbnVtYmVyO1xuICAgIHB1YmxpYyBzbGlkZVRvOiBGdW5jdGlvbjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICAkc2NvcGU6IG5nLklTY29wZSwgXG4gICAgICAgICRlbGVtZW50LCBcbiAgICAgICAgJGF0dHJzLCBcbiAgICAgICAgJHBhcnNlOiBuZy5JUGFyc2VTZXJ2aWNlLCBcbiAgICAgICAgJHRpbWVvdXQ6IGFuZ3VsYXIuSVRpbWVvdXRTZXJ2aWNlLFxuICAgICAgICAkaW50ZXJ2YWw6IGFuZ3VsYXIuSUludGVydmFsU2VydmljZSwgXG4gICAgICAgIHBpcEltYWdlU2xpZGVyKSB7XG5cbiAgICAgICAgdGhpcy5zbGlkZXJJbmRleCA9ICRzY29wZVsndm0nXVsnc2xpZGVySW5kZXgnXTtcbiAgICAgICAgdGhpcy5fdHlwZSA9ICRzY29wZVsndm0nXVsndHlwZSddKCk7XG4gICAgICAgIHRoaXMuX2ludGVydmFsID0gJHNjb3BlWyd2bSddWydpbnRlcnZhbCddKCk7XG4gICAgICAgIHRoaXMuXyRhdHRycyA9ICRhdHRycztcbiAgICAgICAgdGhpcy5fJGludGVydmFsID0gJGludGVydmFsO1xuICAgICAgICB0aGlzLl8kc2NvcGUgPSAkc2NvcGU7XG4gICAgICAgICRzY29wZVsnc2xpZGVUbyddID0gdGhpcy5zbGlkZVRvUHJpdmF0ZTtcblxuICAgICAgICAkZWxlbWVudC5hZGRDbGFzcygncGlwLWltYWdlLXNsaWRlcicpO1xuICAgICAgICAkZWxlbWVudC5hZGRDbGFzcygncGlwLWFuaW1hdGlvbi0nICsgdGhpcy5fdHlwZSk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnNldEluZGV4KCk7XG5cbiAgICAgICAgJHRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fYmxvY2tzID0gJGVsZW1lbnQuZmluZCgnLnBpcC1hbmltYXRpb24tYmxvY2snKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9ibG9ja3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICQodGhpcy5fYmxvY2tzWzBdKS5hZGRDbGFzcygncGlwLXNob3cnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5zdGFydEludGVydmFsKCk7XG5cbiAgICAgICAgdGhpcy5fdGhyb3R0bGVkID0gXy50aHJvdHRsZSgoKSA9PiB7XG4gICAgICAgICAgICBwaXBJbWFnZVNsaWRlci50b0Jsb2NrKHRoaXMuX3R5cGUsIHRoaXMuX2Jsb2NrcywgdGhpcy5faW5kZXgsIHRoaXMuX25ld0luZGV4LCB0aGlzLl9kaXJlY3Rpb24pO1xuICAgICAgICAgICAgdGhpcy5faW5kZXggPSB0aGlzLl9uZXdJbmRleDtcbiAgICAgICAgICAgIHRoaXMuc2V0SW5kZXgoKTtcbiAgICAgICAgfSwgNzAwKTtcbiAgICAgICAgXG4gICAgICAgIGlmICgkYXR0cnMuaWQpIHsgcGlwSW1hZ2VTbGlkZXIucmVnaXN0ZXJTbGlkZXIoJGF0dHJzLmlkLCAkc2NvcGUpIH1cblxuICAgICAgICAkZWxlbWVudC5vbignJGRlc3Ryb3knLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnN0b3BJbnRlcnZhbCgpO1xuICAgICAgICAgICAgcGlwSW1hZ2VTbGlkZXIucmVtb3ZlU2xpZGVyKCRhdHRycy5pZCk7XG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgcHVibGljIG5leHRCbG9jaygpIHtcbiAgICAgICAgdGhpcy5yZXN0YXJ0SW50ZXJ2YWwoKTtcbiAgICAgICAgdGhpcy5fbmV3SW5kZXggPSB0aGlzLl9pbmRleCArIDEgPT09IHRoaXMuX2Jsb2Nrcy5sZW5ndGggPyAwIDogdGhpcy5faW5kZXggKyAxO1xuICAgICAgICB0aGlzLl9kaXJlY3Rpb24gPSAnbmV4dCc7XG4gICAgICAgIHRoaXMuX3Rocm90dGxlZCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBwcmV2QmxvY2soKSB7XG4gICAgICAgIHRoaXMucmVzdGFydEludGVydmFsKCk7XG4gICAgICAgIHRoaXMuX25ld0luZGV4ID0gdGhpcy5faW5kZXggLSAxIDwgMCA/IHRoaXMuX2Jsb2Nrcy5sZW5ndGggLSAxIDogdGhpcy5faW5kZXggLSAxO1xuICAgICAgICB0aGlzLl9kaXJlY3Rpb24gPSAncHJldic7XG4gICAgICAgIHRoaXMuX3Rocm90dGxlZCgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2xpZGVUb1ByaXZhdGUobmV4dEluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKG5leHRJbmRleCA9PT0gdGhpcy5faW5kZXggfHwgbmV4dEluZGV4ID4gdGhpcy5fYmxvY2tzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVzdGFydEludGVydmFsKCk7XG4gICAgICAgIHRoaXMuX25ld0luZGV4ID0gbmV4dEluZGV4O1xuICAgICAgICB0aGlzLl9kaXJlY3Rpb24gPSBuZXh0SW5kZXggPiB0aGlzLl9pbmRleCA/ICduZXh0JyA6ICdwcmV2JztcbiAgICAgICAgdGhpcy5fdGhyb3R0bGVkKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRJbmRleCgpIHtcbiAgICAgICAgaWYgKHRoaXMuXyRhdHRycy5waXBJbWFnZUluZGV4KSB0aGlzLnNsaWRlckluZGV4ID0gdGhpcy5faW5kZXg7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGFydEludGVydmFsKCkge1xuICAgICAgICB0aGlzLl90aW1lUHJvbWlzZXMgPSB0aGlzLl8kaW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fbmV3SW5kZXggPSB0aGlzLl9pbmRleCArIDEgPT09IHRoaXMuX2Jsb2Nrcy5sZW5ndGggPyAwIDogdGhpcy5faW5kZXggKyAxO1xuICAgICAgICAgICAgdGhpcy5fZGlyZWN0aW9uID0gJ25leHQnO1xuICAgICAgICAgICAgdGhpcy5fdGhyb3R0bGVkKCk7XG4gICAgICAgIH0sIHRoaXMuX2ludGVydmFsIHx8IHRoaXMuREVGQVVMVF9JTlRFUlZBTCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdG9wSW50ZXJ2YWwoKSB7XG4gICAgICAgIHRoaXMuXyRpbnRlcnZhbC5jYW5jZWwodGhpcy5fdGltZVByb21pc2VzKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlc3RhcnRJbnRlcnZhbCgpIHtcbiAgICAgICAgdGhpcy5zdG9wSW50ZXJ2YWwoKTtcbiAgICAgICAgdGhpcy5zdGFydEludGVydmFsKCk7XG4gICAgfVxufVxuXG4oKCkgPT4ge1xuXG4gICAgZnVuY3Rpb24gcGlwSW1hZ2VTbGlkZXIoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIHNsaWRlckluZGV4OiAnPXBpcEltYWdlSW5kZXgnLFxuICAgICAgICAgICAgICAgIHR5cGU6ICcmcGlwQW5pbWF0aW9uVHlwZScsXG4gICAgICAgICAgICAgICAgaW50ZXJ2YWw6ICcmcGlwQW5pbWF0aW9uSW50ZXJ2YWwnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IHBpcEltYWdlU2xpZGVyQ29udHJvbGxlcixcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgICAgICB9O1xuICAgIH1cblxuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdwaXBJbWFnZVNsaWRlcicsIFsncGlwU2xpZGVyQnV0dG9uJywgJ3BpcFNsaWRlckluZGljYXRvcicsICdwaXBJbWFnZVNsaWRlci5TZXJ2aWNlJ10pXG4gICAgICAgIC5kaXJlY3RpdmUoJ3BpcEltYWdlU2xpZGVyJywgcGlwSW1hZ2VTbGlkZXIpO1xufSkoKTtcbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi90eXBpbmdzL3RzZC5kLnRzXCIgLz5cblxuaW50ZXJmYWNlIElJbWFnZVNsaWRlclNlcnZpY2Uge1xuICAgIHJlZ2lzdGVyU2xpZGVyKHNsaWRlcklkOiBzdHJpbmcsIHNsaWRlclNjb3BlKTogdm9pZDtcbiAgICByZW1vdmVTbGlkZXIoc2xpZGVySWQ6IHN0cmluZyk6IHZvaWQ7XG4gICAgZ2V0U2xpZGVyU2NvcGUoc2xpZGVySWQ6IHN0cmluZyk7XG4gICAgbmV4dENhcm91c2VsKG5leHRCbG9jaywgcHJldkJsb2NrKTogdm9pZDtcbiAgICBwcmV2Q2Fyb3VzZWwobmV4dEJsb2NrLCBwcmV2QmxvY2spOiB2b2lkO1xuICAgIHRvQmxvY2sodHlwZTogc3RyaW5nLCBibG9ja3M6IGFueVtdLCBvbGRJbmRleDogbnVtYmVyLCBuZXh0SW5kZXg6IG51bWJlciwgZGlyZWN0aW9uOiBzdHJpbmcpOiB2b2lkO1xufVxuXG5jbGFzcyBJbWFnZVNsaWRlclNlcnZpY2Uge1xuICAgIHByaXZhdGUgXyR0aW1lb3V0OiBhbmd1bGFyLklUaW1lb3V0U2VydmljZTtcbiAgICBwcml2YXRlIEFOSU1BVElPTl9EVVJBVElPTjogbnVtYmVyID0gNTUwO1xuICAgIHByaXZhdGUgX3NsaWRlcnMgPSB7fTtcblxuICAgIGNvbnN0cnVjdG9yKCR0aW1lb3V0OiBhbmd1bGFyLklUaW1lb3V0U2VydmljZSkge1xuICAgICAgICB0aGlzLl8kdGltZW91dCA9ICR0aW1lb3V0O1xuICAgIH1cblxuICAgIHB1YmxpYyByZWdpc3RlclNsaWRlcihzbGlkZXJJZDogc3RyaW5nLCBzbGlkZXJTY29wZSk6IHZvaWQge1xuICAgICAgICB0aGlzLl9zbGlkZXJzW3NsaWRlcklkXSA9IHNsaWRlclNjb3BlO1xuICAgIH1cbiAgICAgICAgICAgIFxuICAgIHB1YmxpYyByZW1vdmVTbGlkZXIoc2xpZGVySWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBkZWxldGUgdGhpcy5fc2xpZGVyc1tzbGlkZXJJZF07XG4gICAgfVxuXG4gICAgcHVibGljIGdldFNsaWRlclNjb3BlKHNsaWRlcklkOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NsaWRlcnNbc2xpZGVySWRdO1xuICAgIH1cblxuICAgIHB1YmxpYyBuZXh0Q2Fyb3VzZWwobmV4dEJsb2NrLCBwcmV2QmxvY2spOiB2b2lkIHtcbiAgICAgICAgbmV4dEJsb2NrLmFkZENsYXNzKCdwaXAtbmV4dCcpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICB0aGlzLl8kdGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBuZXh0QmxvY2suYWRkQ2xhc3MoJ2FuaW1hdGVkJykuYWRkQ2xhc3MoJ3BpcC1zaG93JykucmVtb3ZlQ2xhc3MoJ3BpcC1uZXh0Jyk7XG4gICAgICAgICAgICBwcmV2QmxvY2suYWRkQ2xhc3MoJ2FuaW1hdGVkJykucmVtb3ZlQ2xhc3MoJ3BpcC1zaG93Jyk7XG4gICAgICAgIH0sIDEwMCk7XG4gICAgfVxuXG4gICAgcHVibGljIHByZXZDYXJvdXNlbChuZXh0QmxvY2ssIHByZXZCbG9jayk6IHZvaWQge1xuICAgICAgICB0aGlzLl8kdGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBuZXh0QmxvY2suYWRkQ2xhc3MoJ2FuaW1hdGVkJykuYWRkQ2xhc3MoJ3BpcC1zaG93Jyk7XG4gICAgICAgICAgICBwcmV2QmxvY2suYWRkQ2xhc3MoJ2FuaW1hdGVkJykuYWRkQ2xhc3MoJ3BpcC1uZXh0JykucmVtb3ZlQ2xhc3MoJ3BpcC1zaG93Jyk7XG4gICAgICAgIH0sIDEwMCk7XG4gICAgfVxuXG4gICAgcHVibGljIHRvQmxvY2sodHlwZTogc3RyaW5nLCBibG9ja3M6IGFueVtdLCBvbGRJbmRleDogbnVtYmVyLCBuZXh0SW5kZXg6IG51bWJlciwgZGlyZWN0aW9uOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgbGV0IHByZXZCbG9jayA9ICQoYmxvY2tzW29sZEluZGV4XSksXG4gICAgICAgICAgICBibG9ja0luZGV4OiBudW1iZXIgPSBuZXh0SW5kZXgsXG4gICAgICAgICAgICBuZXh0QmxvY2sgPSAkKGJsb2Nrc1tibG9ja0luZGV4XSk7XG5cbiAgICAgICAgaWYgKHR5cGUgPT09ICdjYXJvdXNlbCcpIHtcbiAgICAgICAgICAgICQoYmxvY2tzKS5yZW1vdmVDbGFzcygncGlwLW5leHQnKS5yZW1vdmVDbGFzcygncGlwLXByZXYnKS5yZW1vdmVDbGFzcygnYW5pbWF0ZWQnKTtcblxuICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiAmJiAoZGlyZWN0aW9uID09PSAncHJldicgfHwgZGlyZWN0aW9uID09PSAnbmV4dCcpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJldkNhcm91c2VsKG5leHRCbG9jaywgcHJldkJsb2NrKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHRDYXJvdXNlbChuZXh0QmxvY2ssIHByZXZCbG9jayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAobmV4dEluZGV4ICYmIG5leHRJbmRleCA8IG9sZEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJldkNhcm91c2VsKG5leHRCbG9jaywgcHJldkJsb2NrKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHRDYXJvdXNlbChuZXh0QmxvY2ssIHByZXZCbG9jayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJldkJsb2NrLmFkZENsYXNzKCdhbmltYXRlZCcpLnJlbW92ZUNsYXNzKCdwaXAtc2hvdycpO1xuICAgICAgICAgICAgbmV4dEJsb2NrLmFkZENsYXNzKCdhbmltYXRlZCcpLmFkZENsYXNzKCdwaXAtc2hvdycpO1xuICAgICAgICB9XG4gICAgfVxuXG59XG5cblxuKCgpID0+IHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdwaXBJbWFnZVNsaWRlci5TZXJ2aWNlJywgW10pXG4gICAgICAgIC5zZXJ2aWNlKCdwaXBJbWFnZVNsaWRlcicsIEltYWdlU2xpZGVyU2VydmljZSk7XG59KSgpO1xuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL3R5cGluZ3MvdHNkLmQudHNcIiAvPlxuXG4oKCkgPT4ge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciB0aGlzTW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ3BpcFNsaWRlckJ1dHRvbicsIFtdKTtcblxuICAgIHRoaXNNb2R1bGUuZGlyZWN0aXZlKCdwaXBTbGlkZXJCdXR0b24nLFxuICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHNjb3BlOiB7fSxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBmdW5jdGlvbiAoJHNjb3BlLCAkZWxlbWVudCwgJHBhcnNlLCAkYXR0cnMsIHBpcEltYWdlU2xpZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0eXBlID0gJHBhcnNlKCRhdHRycy5waXBCdXR0b25UeXBlKSgkc2NvcGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVySWQgPSAkcGFyc2UoJGF0dHJzLnBpcFNsaWRlcklkKSgkc2NvcGUpO1xuXG4gICAgICAgICAgICAgICAgICAgICRlbGVtZW50Lm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2xpZGVySWQgfHwgIXR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHBpcEltYWdlU2xpZGVyLmdldFNsaWRlclNjb3BlKHNsaWRlcklkKS52bVt0eXBlICsgJ0Jsb2NrJ10oKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICk7XG5cbn0pKCk7XG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vdHlwaW5ncy90c2QuZC50c1wiIC8+XG5cbihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIHRoaXNNb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgncGlwU2xpZGVySW5kaWNhdG9yJywgW10pO1xuXG4gICAgdGhpc01vZHVsZS5kaXJlY3RpdmUoJ3BpcFNsaWRlckluZGljYXRvcicsXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc2NvcGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICgkc2NvcGUsICRlbGVtZW50LCAkcGFyc2UsICRhdHRycywgcGlwSW1hZ2VTbGlkZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNsaWRlcklkID0gJHBhcnNlKCRhdHRycy5waXBTbGlkZXJJZCkoJHNjb3BlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlVG8gPSAkcGFyc2UoJGF0dHJzLnBpcFNsaWRlVG8pKCRzY29wZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgJGVsZW1lbnQuY3NzKCdjdXJzb3InLCAncG9pbnRlcicpO1xuICAgICAgICAgICAgICAgICAgICAkZWxlbWVudC5vbignY2xpY2snLCAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzbGlkZXJJZCB8fCBzbGlkZVRvICYmIHNsaWRlVG8gPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcGlwSW1hZ2VTbGlkZXIuZ2V0U2xpZGVyU2NvcGUoc2xpZGVySWQpLnZtLnNsaWRlVG9Qcml2YXRlKHNsaWRlVG8pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgKTtcblxufSkoKTtcbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi90eXBpbmdzL3RzZC5kLnRzXCIgLz5cblxuZGVjbGFyZSB2YXIgbWFya2VkOiBhbnk7XG5cbmZ1bmN0aW9uIENvbmZpZygkaW5qZWN0b3IpIHtcbiAgICBjb25zdCBwaXBUcmFuc2xhdGUgPSAkaW5qZWN0b3IuaGFzKCdwaXBUcmFuc2xhdGUnKSA/ICRpbmplY3Rvci5nZXQoJ3BpcFRyYW5zbGF0ZScpIDogbnVsbDtcblxuICAgIGlmIChwaXBUcmFuc2xhdGUpIHtcbiAgICAgICAgcGlwVHJhbnNsYXRlLnNldFRyYW5zbGF0aW9ucygnZW4nLCB7XG4gICAgICAgICAgICAnTUFSS0RPV05fQVRUQUNITUVOVFMnOiAnQXR0YWNobWVudHM6JyxcbiAgICAgICAgICAgICdjaGVja2xpc3QnOiAnQ2hlY2tsaXN0JyxcbiAgICAgICAgICAgICdkb2N1bWVudHMnOiAnRG9jdW1lbnRzJyxcbiAgICAgICAgICAgICdwaWN0dXJlcyc6ICdQaWN0dXJlcycsXG4gICAgICAgICAgICAnbG9jYXRpb24nOiAnTG9jYXRpb24nLFxuICAgICAgICAgICAgJ3RpbWUnOiAnVGltZSdcbiAgICAgICAgfSk7XG4gICAgICAgIHBpcFRyYW5zbGF0ZS5zZXRUcmFuc2xhdGlvbnMoJ3J1Jywge1xuICAgICAgICAgICAgJ01BUktET1dOX0FUVEFDSE1FTlRTJzogJ9CS0LvQvtC20LXQvdC40Y86JyxcbiAgICAgICAgICAgICdjaGVja2xpc3QnOiAn0KHQv9C40YHQvtC6JyxcbiAgICAgICAgICAgICdkb2N1bWVudHMnOiAn0JTQvtC60YPQvNC10L3RgtGLJyxcbiAgICAgICAgICAgICdwaWN0dXJlcyc6ICfQmNC30L7QsdGA0LDQttC10L3QuNGPJyxcbiAgICAgICAgICAgICdsb2NhdGlvbic6ICfQnNC10YHRgtC+0L3QsNGF0L7QttC00LXQvdC40LUnLFxuICAgICAgICAgICAgJ3RpbWUnOiAn0JLRgNC10LzRjydcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5jbGFzcyBNYXJrZG93bkNvbnRyb2xsZXIge1xuICAgIHByaXZhdGUgX3BpcFRyYW5zbGF0ZTtcbiAgICBwcml2YXRlIF8kcGFyc2U6IGFuZ3VsYXIuSVBhcnNlU2VydmljZTtcbiAgICBwcml2YXRlIF8kc2NvcGU6IGFuZ3VsYXIuSVNjb3BlO1xuICAgIHByaXZhdGUgXyRpbmplY3RvcjtcbiAgICBwcml2YXRlIF8kZWxlbWVudDtcbiAgICBwcml2YXRlIF8kYXR0cnM7XG4gICAgcHJpdmF0ZSBfdGV4dDtcbiAgICBwcml2YXRlIF9pc0xpc3Q7XG4gICAgcHJpdmF0ZSBfY2xhbXA7XG4gICAgcHJpdmF0ZSBfcmViaW5kO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgICRzY29wZTogYW5ndWxhci5JU2NvcGUsXG4gICAgICAgICRwYXJzZTogYW5ndWxhci5JUGFyc2VTZXJ2aWNlLFxuICAgICAgICAkYXR0cnMsXG4gICAgICAgICRlbGVtZW50LFxuICAgICAgICAkaW5qZWN0b3JcbiAgICApIHtcbiAgICAgICAgdGhpcy5fcGlwVHJhbnNsYXRlID0gJGluamVjdG9yLmhhcygncGlwVHJhbnNsYXRlJykgPyAkaW5qZWN0b3IuZ2V0KCdwaXBUcmFuc2xhdGUnKSA6IG51bGw7XG4gICAgICAgIHRoaXMuXyRwYXJzZSA9ICRwYXJzZTtcbiAgICAgICAgdGhpcy5fJHNjb3BlID0gJHNjb3BlO1xuICAgICAgICB0aGlzLl8kaW5qZWN0b3IgPSAkaW5qZWN0b3I7XG4gICAgICAgIHRoaXMuXyRlbGVtZW50ID0gJGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuXyRhdHRycyA9ICRhdHRycztcbiAgICAgICAgdGhpcy5fdGV4dCA9ICRzY29wZVsnJGN0cmwnXVsndGV4dCddO1xuICAgICAgICB0aGlzLl9pc0xpc3QgPSAkc2NvcGVbJyRjdHJsJ11bJ2lzTGlzdCddO1xuICAgICAgICB0aGlzLl9jbGFtcCA9ICRzY29wZVsnJGN0cmwnXVsnY2xhbXAnXTtcbiAgICAgICAgdGhpcy5fcmViaW5kID0gJHNjb3BlWyckY3RybCddWydyZWJpbmQnXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgJHBvc3RMaW5rKCkge1xuICAgICAgICAvLyBGaWxsIHRoZSB0ZXh0XG4gICAgICAgIHRoaXMuYmluZFRleHQodGhpcy5fdGV4dCk7XG5cbiAgICAgICAgdGhpcy5fJHNjb3BlLiRvbigncGlwV2luZG93UmVzaXplZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmJpbmRUZXh0KSB0aGlzLmJpbmRUZXh0KHRoaXMuX3RleHQodGhpcy5fJHNjb3BlKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEFkZCBjbGFzc1xuICAgICAgICB0aGlzLl8kZWxlbWVudC5hZGRDbGFzcygncGlwLW1hcmtkb3duJyk7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgJG9uQ2hhbmdlcyhjaGFuZ2VzOiBhbnkpIHtcbiAgICAgICAgY29uc3QgbmV3VGV4dCA9IGNoYW5nZXNbJ3RleHQnXS5jdXJyZW50VmFsdWU7XG5cbiAgICAgICAgaWYgKHRoaXMuX3JlYmluZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3RleHQgIT09IG5ld1RleHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90ZXh0ID0gbmV3VGV4dDtcbiAgICAgICAgICAgICAgICB0aGlzLmJpbmRUZXh0KHRoaXMuX3RleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkZXNjcmliZUF0dGFjaG1lbnRzKGFycmF5KSB7XG4gICAgICAgIHZhciBhdHRhY2hTdHJpbmcgPSAnJyxcbiAgICAgICAgICAgIGF0dGFjaFR5cGVzID0gW107XG5cbiAgICAgICAgXy5lYWNoKGFycmF5LCBmdW5jdGlvbiAoYXR0YWNoKSB7XG4gICAgICAgICAgICBpZiAoYXR0YWNoLnR5cGUgJiYgYXR0YWNoLnR5cGUgIT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgICAgIGlmIChhdHRhY2hTdHJpbmcubGVuZ3RoID09PSAwICYmIHRoaXMuX3BpcFRyYW5zbGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICBhdHRhY2hTdHJpbmcgPSB0aGlzLl9waXBUcmFuc2xhdGUudHJhbnNsYXRlKCdNQVJLRE9XTl9BVFRBQ0hNRU5UUycpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChhdHRhY2hUeXBlcy5pbmRleE9mKGF0dGFjaC50eXBlKSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0YWNoVHlwZXMucHVzaChhdHRhY2gudHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGF0dGFjaFN0cmluZyArPSBhdHRhY2hUeXBlcy5sZW5ndGggPiAxID8gJywgJyA6ICcgJztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3BpcFRyYW5zbGF0ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dGFjaFN0cmluZyArPSB0aGlzLl9waXBUcmFuc2xhdGUudHJhbnNsYXRlKGF0dGFjaC50eXBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBhdHRhY2hTdHJpbmc7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBiaW5kVGV4dCh2YWx1ZSkge1xuICAgICAgICB2YXIgdGV4dFN0cmluZywgaXNDbGFtcGVkLCBoZWlnaHQsIG9wdGlvbnMsIG9iajtcblxuICAgICAgICBpZiAoXy5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgb2JqID0gXy5maW5kKHZhbHVlLCBmdW5jdGlvbiAoaXRlbTogYW55KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0udHlwZSA9PT0gJ3RleHQnICYmIGl0ZW0udGV4dDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0ZXh0U3RyaW5nID0gb2JqID8gb2JqLnRleHQgOiB0aGlzLmRlc2NyaWJlQXR0YWNobWVudHModmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGV4dFN0cmluZyA9IHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaXNDbGFtcGVkID0gdGhpcy5fJGF0dHJzLnBpcExpbmVDb3VudCAmJiBfLmlzTnVtYmVyKHRoaXMuX2NsYW1wKTtcbiAgICAgICAgaXNDbGFtcGVkID0gaXNDbGFtcGVkICYmIHRleHRTdHJpbmcgJiYgdGV4dFN0cmluZy5sZW5ndGggPiAwO1xuICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgZ2ZtOiB0cnVlLFxuICAgICAgICAgICAgdGFibGVzOiB0cnVlLFxuICAgICAgICAgICAgYnJlYWtzOiB0cnVlLFxuICAgICAgICAgICAgc2FuaXRpemU6IHRydWUsXG4gICAgICAgICAgICBwZWRhbnRpYzogdHJ1ZSxcbiAgICAgICAgICAgIHNtYXJ0TGlzdHM6IHRydWUsXG4gICAgICAgICAgICBzbWFydHlwZW50czogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgdGV4dFN0cmluZyA9IG1hcmtlZCh0ZXh0U3RyaW5nIHx8ICcnLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKGlzQ2xhbXBlZCkge1xuICAgICAgICAgICAgaGVpZ2h0ID0gMS41ICogdGhpcy5fY2xhbXA7XG4gICAgICAgIH0gXG4gICAgICAgIC8vIEFzc2lnbiB2YWx1ZSBhcyBIVE1MXG4gICAgICAgIHRoaXMuXyRlbGVtZW50Lmh0bWwoJzxkaXYnICsgKGlzQ2xhbXBlZCA/IHRoaXMuX2lzTGlzdCA/ICdjbGFzcz1cInBpcC1tYXJrZG93bi1jb250ZW50ICcgK1xuICAgICAgICAgICAgJ3BpcC1tYXJrZG93bi1saXN0XCIgc3R5bGU9XCJtYXgtaGVpZ2h0OiAnICsgaGVpZ2h0ICsgJ2VtXCI+JyA6XG4gICAgICAgICAgICAnIGNsYXNzPVwicGlwLW1hcmtkb3duLWNvbnRlbnRcIiBzdHlsZT1cIm1heC1oZWlnaHQ6ICcgKyBoZWlnaHQgKyAnZW1cIj4nIDogdGhpcy5faXNMaXN0ID9cbiAgICAgICAgICAgICcgY2xhc3M9XCJwaXAtbWFya2Rvd24tbGlzdFwiPicgOiAnPicpICsgdGV4dFN0cmluZyArICc8L2Rpdj4nKTtcbiAgICAgICAgdGhpcy5fJGVsZW1lbnQuZmluZCgnYScpLmF0dHIoJ3RhcmdldCcsICdibGFuaycpO1xuICAgICAgICBpZiAoIXRoaXMuX2lzTGlzdCAmJiBpc0NsYW1wZWQpIHtcbiAgICAgICAgICAgIHRoaXMuXyRlbGVtZW50LmFwcGVuZCgnPGRpdiBjbGFzcz1cInBpcC1ncmFkaWVudC1ibG9ja1wiPjwvZGl2PicpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4oZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGNvbnN0IE1hcmtkb3duQ29tcG9uZW50ID0ge1xuICAgICAgICBjb250cm9sbGVyOiBNYXJrZG93bkNvbnRyb2xsZXIsXG4gICAgICAgIGJpbmRpbmdzOiB7XG4gICAgICAgICAgICB0ZXh0OiAnPHBpcFRleHQnLFxuICAgICAgICAgICAgaXNMaXN0OiAnPD9waXBMaXN0JyxcbiAgICAgICAgICAgIGNsYW1wOiAnPD9waXBMaW5lQ291bnQnLFxuICAgICAgICAgICAgcmViaW5kOiAnPD9waXBSZWJpbmQnXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgncGlwTWFya2Rvd24nLCBbJ25nU2FuaXRpemUnXSlcbiAgICAgICAgLnJ1bihDb25maWcpXG4gICAgICAgIC5jb21wb25lbnQoJ3BpcE1hcmtkb3duJywgTWFya2Rvd25Db21wb25lbnQpO1xufSkoKTsiLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vdHlwaW5ncy90c2QuZC50c1wiIC8+XG5cblxuZXhwb3J0IGNsYXNzIFBvcG92ZXJDb250cm9sbGVyIHtcbiAgXG4gICAgcHJpdmF0ZSBfJHRpbWVvdXQ7XG4gICAgcHJpdmF0ZSBfJHNjb3BlOiBuZy5JU2NvcGU7XG5cbiAgICBwdWJsaWMgdGltZW91dDtcbiAgICBwdWJsaWMgYmFja2Ryb3BFbGVtZW50O1xuICAgIHB1YmxpYyBjb250ZW50O1xuICAgIHB1YmxpYyBlbGVtZW50O1xuICAgIHB1YmxpYyBjYWxjSDogYm9vbGVhbjtcblxuICAgIHB1YmxpYyB0ZW1wbGF0ZVVybDtcbiAgICBwdWJsaWMgdGVtcGxhdGVcblxuICAgIHB1YmxpYyBjYW5jZWxDYWxsYmFjazogRnVuY3Rpb247XG5cbiAgICBjb25zdHJ1Y3RvciggXG4gICAgICAgICRzY29wZTogbmcuSVNjb3BlLFxuICAgICAgICAkcm9vdFNjb3BlLFxuICAgICAgICAkZWxlbWVudCxcbiAgICAgICAgJHRpbWVvdXQsIFxuICAgICAgICAkY29tcGlsZVxuICAgICAgICkge1xuICAgICAgICAgICAvLyRzY29wZSA9IF8uZGVmYXVsdHMoJHNjb3BlLCAkc2NvcGUuJHBhcmVudCk7ICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgXG4gICAgICAgICAgIHRoaXMuXyR0aW1lb3V0ID0gJHRpbWVvdXQ7XG4gICAgICAgICAgIHRoaXMudGVtcGxhdGVVcmwgPSAkc2NvcGVbJ3BhcmFtcyddLnRlbXBsYXRlVXJsO1xuICAgICAgICAgICB0aGlzLnRlbXBsYXRlID0gJHNjb3BlWydwYXJhbXMnXS50ZW1wbGF0ZTtcbiAgICAgICAgICAgdGhpcy50aW1lb3V0ID0gJHNjb3BlWydwYXJhbXMnXS50aW1lb3V0O1xuICAgICAgICAgICB0aGlzLmVsZW1lbnQgPSAkc2NvcGVbJ3BhcmFtcyddLmVsZW1lbnQ7XG4gICAgICAgICAgIHRoaXMuY2FsY0ggPSAkc2NvcGVbJ3BhcmFtcyddLmNhbGNIZWlnaHQ7XG4gICAgICAgICAgIHRoaXMuY2FuY2VsQ2FsbGJhY2sgPSAkc2NvcGVbJ3BhcmFtcyddLmNhbmNlbENhbGxiYWNrO1xuICAgICAgICAgICB0aGlzLmJhY2tkcm9wRWxlbWVudCA9ICQoJy5waXAtcG9wb3Zlci1iYWNrZHJvcCcpO1xuICAgICAgICAgICB0aGlzLmJhY2tkcm9wRWxlbWVudC5vbignY2xpY2sga2V5ZG93biBzY3JvbGwnLCgpID0+eyB0aGlzLmJhY2tkcm9wQ2xpY2soKX0pO1xuICAgICAgICAgICB0aGlzLmJhY2tkcm9wRWxlbWVudC5hZGRDbGFzcygkc2NvcGVbJ3BhcmFtcyddLnJlc3BvbnNpdmUgIT09IGZhbHNlID8gJ3BpcC1yZXNwb25zaXZlJyA6ICcnKTtcblxuICAgICAgICAgICAkdGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgIGlmICgkc2NvcGVbJ3BhcmFtcyddLnRlbXBsYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGVudCA9ICRjb21waWxlKCRzY29wZVsncGFyYW1zJ10udGVtcGxhdGUpKCRzY29wZSk7XG4gICAgICAgICAgICAgICAgICAgICRlbGVtZW50LmZpbmQoJy5waXAtcG9wb3ZlcicpLmFwcGVuZCh0aGlzLmNvbnRlbnQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAkdGltZW91dCgoKSA9PiB7IHRoaXMuY2FsY0hlaWdodCgpOyB9LCAyMDApO1xuICAgICAgICAgICAkcm9vdFNjb3BlLiRvbigncGlwUG9wb3ZlclJlc2l6ZScsICgpID0+IHsgdGhpcy5vblJlc2l6ZSgpfSk7XG4gICAgICAgICAgICQod2luZG93KS5yZXNpemUoKCkgPT4geyB0aGlzLm9uUmVzaXplKCkgfSk7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgYmFja2Ryb3BDbGljaygpIHtcbiAgICAgICAgaWYgKHRoaXMuY2FuY2VsQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsQ2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNsb3NlUG9wb3ZlcigpO1xuICAgIH1cblxuICAgIHB1YmxpYyBjbG9zZVBvcG92ZXIoKSB7XG4gICAgICAgIHRoaXMuYmFja2Ryb3BFbGVtZW50LnJlbW92ZUNsYXNzKCdvcGVuZWQnKTtcbiAgICAgICAgdGhpcy5fJHRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5iYWNrZHJvcEVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgIH0sIDEwMCk7XG4gICAgfVxuXG4gICAgcHVibGljIG9uUG9wb3ZlckNsaWNrKCRlKSB7XG4gICAgICAgICRlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cblxuXG4gICAgcHJpdmF0ZSBpbml0KCkge1xuICAgICAgICB0aGlzLmJhY2tkcm9wRWxlbWVudC5hZGRDbGFzcygnb3BlbmVkJyk7XG4gICAgICAgICQoJy5waXAtcG9wb3Zlci1iYWNrZHJvcCcpLmZvY3VzKCk7XG4gICAgICAgIGlmICh0aGlzLnRpbWVvdXQpIHtcbiAgICAgICAgICAgIHRoaXMuXyR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlUG9wb3ZlcigpO1xuICAgICAgICAgICAgfSwgdGhpcy50aW1lb3V0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgcG9zaXRpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnQpIHtcbiAgICAgICAgICAgIGxldCBlbGVtZW50ID0gJCh0aGlzLmVsZW1lbnQpLFxuICAgICAgICAgICAgICAgIHBvcyA9IGVsZW1lbnQub2Zmc2V0KCksXG4gICAgICAgICAgICAgICAgd2lkdGggPSBlbGVtZW50LndpZHRoKCksXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gZWxlbWVudC5oZWlnaHQoKSxcbiAgICAgICAgICAgICAgICBkb2NXaWR0aCA9ICQoZG9jdW1lbnQpLndpZHRoKCksXG4gICAgICAgICAgICAgICAgZG9jSGVpZ2h0ID0gJChkb2N1bWVudCkuaGVpZ2h0KCksXG4gICAgICAgICAgICAgICAgcG9wb3ZlciA9IHRoaXMuYmFja2Ryb3BFbGVtZW50LmZpbmQoJy5waXAtcG9wb3ZlcicpO1xuXG4gICAgICAgICAgICBpZiAocG9zKSB7XG4gICAgICAgICAgICAgICAgcG9wb3ZlclxuICAgICAgICAgICAgICAgICAgICAuY3NzKCdtYXgtd2lkdGgnLCBkb2NXaWR0aCAtIChkb2NXaWR0aCAtIHBvcy5sZWZ0KSlcbiAgICAgICAgICAgICAgICAgICAgLmNzcygnbWF4LWhlaWdodCcsIGRvY0hlaWdodCAtIChwb3MudG9wICsgaGVpZ2h0KSAtIDMyLCAwKVxuICAgICAgICAgICAgICAgICAgICAuY3NzKCdsZWZ0JywgcG9zLmxlZnQgLSBwb3BvdmVyLndpZHRoKCkgKyB3aWR0aCAvIDIpXG4gICAgICAgICAgICAgICAgICAgIC5jc3MoJ3RvcCcsIHBvcy50b3AgKyBoZWlnaHQgKyAxNik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIG9uUmVzaXplKCkge1xuICAgICAgICB0aGlzLmJhY2tkcm9wRWxlbWVudC5maW5kKCcucGlwLXBvcG92ZXInKS5maW5kKCcucGlwLWNvbnRlbnQnKS5jc3MoJ21heC1oZWlnaHQnLCAnMTAwJScpO1xuICAgICAgICB0aGlzLnBvc2l0aW9uKCk7XG4gICAgICAgIHRoaXMuY2FsY0hlaWdodCgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY2FsY0hlaWdodCgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2FsY0ggPT09IGZhbHNlKSB7IHJldHVybjsgfVxuICAgICAgICBsZXQgcG9wb3ZlciA9IHRoaXMuYmFja2Ryb3BFbGVtZW50LmZpbmQoJy5waXAtcG9wb3ZlcicpLFxuICAgICAgICB0aXRsZSA9IHBvcG92ZXIuZmluZCgnLnBpcC10aXRsZScpLFxuICAgICAgICBmb290ZXIgPSBwb3BvdmVyLmZpbmQoJy5waXAtZm9vdGVyJyksXG4gICAgICAgIGNvbnRlbnQgPSBwb3BvdmVyLmZpbmQoJy5waXAtY29udGVudCcpLFxuICAgICAgICBjb250ZW50SGVpZ2h0ID0gcG9wb3Zlci5oZWlnaHQoKSAtIHRpdGxlLm91dGVySGVpZ2h0KHRydWUpIC0gZm9vdGVyLm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgICBjb250ZW50LmNzcygnbWF4LWhlaWdodCcsIE1hdGgubWF4KGNvbnRlbnRIZWlnaHQsIDApICsgJ3B4JykuY3NzKCdib3gtc2l6aW5nJywgJ2JvcmRlci1ib3gnKTtcbiAgICB9XG59XG5cbigoKSA9PiB7XG4gICAgZnVuY3Rpb24gcGlwUG9wb3ZlcigkcGFyc2U6IGFueSkge1xuICAgICAgICBcIm5nSW5qZWN0XCI7XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgICAgICAgICAgICAgIHNjb3BlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncG9wb3Zlci9wb3BvdmVyLmh0bWwnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFBvcG92ZXJDb250cm9sbGVyLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgICAgICAgICAgfTtcbiAgICB9XG5cbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ3BpcFBvcG92ZXInLCBbJ3BpcFBvcG92ZXIuU2VydmljZSddKVxuICAgICAgICAuZGlyZWN0aXZlKCdwaXBQb3BvdmVyJywgcGlwUG9wb3Zlcik7XG5cbn0pKCk7IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL3R5cGluZ3MvdHNkLmQudHNcIiAvPlxuXG5leHBvcnQgY2xhc3MgUG9wb3ZlclNlcnZpY2Uge1xuICBcbiAgICBwcml2YXRlIF8kdGltZW91dDtcbiAgICBwcml2YXRlIF8kc2NvcGU6IG5nLklTY29wZTtcbiAgICBwcml2YXRlIF8kY29tcGlsZTtcbiAgICBwcml2YXRlIF8kcm9vdFNjb3BlOiBuZy5JUm9vdFNjb3BlU2VydmljZTtcblxuICAgIHB1YmxpYyBwb3BvdmVyVGVtcGxhdGU6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKCBcbiAgICAgICAgJGNvbXBpbGUsXG4gICAgICAgICRyb290U2NvcGUsIFxuICAgICAgICAkdGltZW91dFxuICAgICAgICkge1xuICAgICAgICAgICB0aGlzLl8kY29tcGlsZSA9ICRjb21waWxlO1xuICAgICAgICAgICB0aGlzLl8kcm9vdFNjb3BlID0gJHJvb3RTY29wZTtcbiAgICAgICAgICAgdGhpcy5fJHRpbWVvdXQgPSAkdGltZW91dDtcbiAgICAgICAgICAgdGhpcy5wb3BvdmVyVGVtcGxhdGUgPSBcIjxkaXYgY2xhc3M9J3BpcC1wb3BvdmVyLWJhY2tkcm9wIHt7IHBhcmFtcy5jbGFzcyB9fScgbmctY29udHJvbGxlcj0ncGFyYW1zLmNvbnRyb2xsZXInXCIgK1xuICAgICAgICAgICAgICAgIFwiIHRhYmluZGV4PScxJz4gPHBpcC1wb3BvdmVyIHBpcC1wYXJhbXM9J3BhcmFtcyc+IDwvcGlwLXBvcG92ZXI+IDwvZGl2PlwiO1xuICAgIH1cblxuICAgIHB1YmxpYyBzaG93KHApIHtcbiAgICAgICAgbGV0IGVsZW1lbnQsIHNjb3BlOiBuZy5JU2NvcGUsIHBhcmFtcywgY29udGVudDtcbiAgICAgICAgICAgIFxuICAgICAgICBlbGVtZW50ID0gJCgnYm9keScpO1xuICAgICAgICBpZiAoZWxlbWVudC5maW5kKCdtZC1iYWNrZHJvcCcpLmxlbmd0aCA+IDApIHsgcmV0dXJuOyB9XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICBzY29wZSA9IHRoaXMuXyRyb290U2NvcGUuJG5ldygpO1xuICAgICAgICBwYXJhbXMgPSBwICYmIF8uaXNPYmplY3QocCkgPyBwIDoge307XG4gICAgICAgIHNjb3BlWydwYXJhbXMnXSA9IHBhcmFtcztcbiAgICAgICAgc2NvcGVbJ2xvY2FscyddID0gcGFyYW1zLmxvY2FscztcbiAgICAgICAgY29udGVudCA9IHRoaXMuXyRjb21waWxlKHRoaXMucG9wb3ZlclRlbXBsYXRlKShzY29wZSk7XG4gICAgICAgIGVsZW1lbnQuYXBwZW5kKGNvbnRlbnQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBoaWRlKCkge1xuICAgICAgICBsZXQgYmFja2Ryb3BFbGVtZW50ID0gJCgnLnBpcC1wb3BvdmVyLWJhY2tkcm9wJyk7XG4gICAgICAgIGJhY2tkcm9wRWxlbWVudC5yZW1vdmVDbGFzcygnb3BlbmVkJyk7XG4gICAgICAgIHRoaXMuXyR0aW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGJhY2tkcm9wRWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgfSwgMTAwKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVzaXplKCkge1xuICAgICAgICB0aGlzLl8kcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3BpcFBvcG92ZXJSZXNpemUnKTtcbiAgICB9XG59XG5cblxuKCgpID0+IHtcbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ3BpcFBvcG92ZXIuU2VydmljZScsIFtdKVxuICAgICAgICAuc2VydmljZSgncGlwUG9wb3ZlclNlcnZpY2UnLCBQb3BvdmVyU2VydmljZSk7XG59KSgpOyIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi90eXBpbmdzL3RzZC5kLnRzXCIgLz5cblxuY2xhc3MgUm91dGluZ0NvbnRyb2xsZXIge1xuICAgIHByaXZhdGUgX2ltYWdlOiBhbnk7XG4gICAgcHJpdmF0ZSBfJGVsZW1lbnQ7XG5cbiAgICBwdWJsaWMgbG9nb1VybDogc3RyaW5nO1xuICAgIHB1YmxpYyBzaG93UHJvZ3Jlc3M6IEZ1bmN0aW9uO1xuXG4gICAgY29uc3RydWN0b3IoIFxuICAgICAgICAkc2NvcGU6IG5nLklTY29wZSxcbiAgICAgICAgJGVsZW1lbnQpXG4gICAge1xuXG4gICAgICAgIHRoaXMuXyRlbGVtZW50ID0gJGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuc2hvd1Byb2dyZXNzID0gJHNjb3BlWyd2bSddWydzaG93UHJvZ3Jlc3MnXTtcbiAgICAgICAgdGhpcy5sb2dvVXJsID0gJHNjb3BlWyd2bSddWydsb2dvVXJsJ107ICAgIFxuICAgIH1cblxuICAgIHB1YmxpYyAkcG9zdExpbmsoKSB7XG4gICAgICAgIHRoaXMuX2ltYWdlID0gdGhpcy5fJGVsZW1lbnQuZmluZCgnaW1nJyk7IFxuICAgICAgICB0aGlzLmxvYWRQcm9ncmVzc0ltYWdlKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGxvYWRQcm9ncmVzc0ltYWdlKCkge1xuICAgICAgICBpZiAodGhpcy5sb2dvVXJsKSB7XG4gICAgICAgICAgICB0aGlzLl9pbWFnZS5hdHRyKCdzcmMnLCB0aGlzLmxvZ29VcmwpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cbigoKSA9PiB7XG5cbiAgICBjb25zdCBSb3V0aW5nUHJvZ3Jlc3MgPSB7XG4gICAgICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICAgICAgYmluZGluZ3M6IHtcbiAgICAgICAgICAgICAgICBzaG93UHJvZ3Jlc3M6ICcmJyxcbiAgICAgICAgICAgICAgICBsb2dvVXJsOiAnQCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3Byb2dyZXNzL3JvdXRpbmdfcHJvZ3Jlc3MuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiBSb3V0aW5nQ29udHJvbGxlcixcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH1cblxuXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdwaXBSb3V0aW5nUHJvZ3Jlc3MnLCBbJ25nTWF0ZXJpYWwnXSlcbiAgICAgICAgLmNvbXBvbmVudCgncGlwUm91dGluZ1Byb2dyZXNzJywgUm91dGluZ1Byb2dyZXNzKTtcblxufSkoKTtcbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi90eXBpbmdzL3RzZC5kLnRzXCIgLz5cblxuaW50ZXJmYWNlIElQaXBUb2FzdCB7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIGlkOiBzdHJpbmc7XG4gICAgZXJyb3I6IGFueTtcbiAgICBtZXNzYWdlOiBzdHJpbmc7XG4gICAgYWN0aW9uczogc3RyaW5nW107XG4gICAgZHVyYXRpb246IG51bWJlcjtcbiAgICBzdWNjZXNzQ2FsbGJhY2s6IEZ1bmN0aW9uO1xuICAgIGNhbmNlbENhbGxiYWNrOiBGdW5jdGlvblxufVxuXG5jbGFzcyBUb2FzdENvbnRyb2xsZXIge1xuICAgIHByaXZhdGUgXyRtZFRvYXN0OiBhbmd1bGFyLm1hdGVyaWFsLklUb2FzdFNlcnZpY2U7XG4gICAgcHJpdmF0ZSBfcGlwRXJyb3JEZXRhaWxzRGlhbG9nO1xuXG4gICAgcHVibGljIG1lc3NhZ2U6IHN0cmluZztcbiAgICBwdWJsaWMgYWN0aW9uczogc3RyaW5nW107XG4gICAgcHVibGljIHRvYXN0OiBJUGlwVG9hc3Q7XG4gICAgcHVibGljIGFjdGlvbkxlbmdodDogbnVtYmVyO1xuICAgIHB1YmxpYyBzaG93RGV0YWlsczogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKCBcbiAgICAgICAgJG1kVG9hc3Q6IGFuZ3VsYXIubWF0ZXJpYWwuSVRvYXN0U2VydmljZSwgXG4gICAgICAgIHRvYXN0OiBJUGlwVG9hc3QsIFxuICAgICAgICAkaW5qZWN0b3JcbiAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuX3BpcEVycm9yRGV0YWlsc0RpYWxvZyA9ICRpbmplY3Rvci5oYXMoJ3BpcEVycm9yRGV0YWlsc0RpYWxvZycpIFxuICAgICAgICAgICAgICAgID8gJGluamVjdG9yLmdldCgncGlwRXJyb3JEZXRhaWxzRGlhbG9nJykgOiBudWxsO1xuICAgICAgICAgICAgdGhpcy5fJG1kVG9hc3QgPSAkbWRUb2FzdDtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IHRvYXN0Lm1lc3NhZ2U7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSB0b2FzdC5hY3Rpb25zO1xuICAgICAgICAgICAgdGhpcy50b2FzdCA9IHRvYXN0O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAodG9hc3QuYWN0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGlvbkxlbmdodCA9IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9uTGVuZ2h0ID0gdG9hc3QuYWN0aW9ucy5sZW5ndGggPT09IDEgPyB0b2FzdC5hY3Rpb25zWzBdLnRvU3RyaW5nKCkubGVuZ3RoIDogbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zaG93RGV0YWlscyA9IHRoaXMuX3BpcEVycm9yRGV0YWlsc0RpYWxvZyAhPSBudWxsO1xuXG4gICAgfVxuXG4gICAgIHB1YmxpYyBvbkRldGFpbHMoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuXyRtZFRvYXN0LmhpZGUoKTtcbiAgICAgICAgaWYgKHRoaXMuX3BpcEVycm9yRGV0YWlsc0RpYWxvZykge1xuICAgICAgICAgICAgdGhpcy5fcGlwRXJyb3JEZXRhaWxzRGlhbG9nLnNob3coXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZXJyb3I6IHRoaXMudG9hc3QuZXJyb3IsXG4gICAgICAgICAgICAgICAgb2s6ICdPaydcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbmd1bGFyLm5vb3AsXG4gICAgICAgICAgICBhbmd1bGFyLm5vb3BcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgb25BY3Rpb24oYWN0aW9uKTogdm9pZCB7XG4gICAgICAgIHRoaXMuXyRtZFRvYXN0LmhpZGUoXG4gICAgICAgIHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgaWQ6IHRoaXMudG9hc3QuaWQsXG4gICAgICAgICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2VcbiAgICAgICAgfSk7XG5cbiAgICB9XG59XG5cbmludGVyZmFjZSBJVG9hc3RTZXJ2aWNlIHtcbiAgICBzaG93TmV4dFRvYXN0KCk6IHZvaWQ7XG4gICAgc2hvd1RvYXN0KHRvYXN0OiBJUGlwVG9hc3QpOiB2b2lkO1xuICAgIGFkZFRvYXN0KHRvYXN0KTogdm9pZDtcbiAgICByZW1vdmVUb2FzdHModHlwZTogc3RyaW5nKTogdm9pZDtcbiAgICBnZXRUb2FzdEJ5SWQoaWQ6IHN0cmluZyk6IElQaXBUb2FzdDtcbiAgICByZW1vdmVUb2FzdHNCeUlkKGlkOiBzdHJpbmcpOiB2b2lkO1xuICAgIG9uQ2xlYXJUb2FzdHMoKTogdm9pZDtcbiAgICBzaG93Tm90aWZpY2F0aW9uKG1lc3NhZ2U6IHN0cmluZywgYWN0aW9uczogc3RyaW5nW10sIHN1Y2Nlc3NDYWxsYmFjaywgY2FuY2VsQ2FsbGJhY2ssIGlkOiBzdHJpbmcpO1xuICAgIHNob3dNZXNzYWdlKG1lc3NhZ2U6IHN0cmluZywgc3VjY2Vzc0NhbGxiYWNrLCBjYW5jZWxDYWxsYmFjaywgaWQ/OiBzdHJpbmcpO1xuICAgIHNob3dFcnJvcihtZXNzYWdlOiBzdHJpbmcsIHN1Y2Nlc3NDYWxsYmFjaywgY2FuY2VsQ2FsbGJhY2ssIGlkOiBzdHJpbmcsIGVycm9yOiBhbnkpO1xuICAgIGhpZGVBbGxUb2FzdHMoKTogdm9pZDtcbiAgICBjbGVhclRvYXN0cyh0eXBlPzogc3RyaW5nKTtcbn1cblxuY2xhc3MgVG9hc3RTZXJ2aWNlIGltcGxlbWVudHMgSVRvYXN0U2VydmljZSB7XG4gICAgcHJpdmF0ZSBTSE9XX1RJTUVPVVQ6IG51bWJlciA9IDIwMDAwO1xuICAgIHByaXZhdGUgU0hPV19USU1FT1VUX05PVElGSUNBVElPTlM6IG51bWJlciA9IDIwMDAwO1xuICAgIHByaXZhdGUgdG9hc3RzOiBJUGlwVG9hc3RbXSA9IFtdO1xuICAgIHByaXZhdGUgY3VycmVudFRvYXN0OiBhbnk7XG4gICAgcHJpdmF0ZSBzb3VuZHM6IGFueSA9IHt9O1xuXG4gICAgcHJpdmF0ZSBfJG1kVG9hc3Q6IGFuZ3VsYXIubWF0ZXJpYWwuSVRvYXN0U2VydmljZTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICAkcm9vdFNjb3BlOiBuZy5JUm9vdFNjb3BlU2VydmljZSwgXG4gICAgICAgICRtZFRvYXN0OiBhbmd1bGFyLm1hdGVyaWFsLklUb2FzdFNlcnZpY2UpIHtcblxuICAgICAgICB0aGlzLl8kbWRUb2FzdCA9ICRtZFRvYXN0O1xuXG4gICAgICAgICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdWNjZXNzJywgKCkgPT4ge3RoaXMub25TdGF0ZUNoYW5nZVN1Y2Nlc3MoKX0pO1xuICAgICAgICAkcm9vdFNjb3BlLiRvbigncGlwU2Vzc2lvbkNsb3NlZCcsICgpID0+IHt0aGlzLm9uQ2xlYXJUb2FzdHMoKX0pO1xuICAgICAgICAkcm9vdFNjb3BlLiRvbigncGlwSWRlbnRpdHlDaGFuZ2VkJywgKCkgPT4ge3RoaXMub25DbGVhclRvYXN0cygpfSk7XG4gICAgfVxuXG4gICAgcHVibGljIHNob3dOZXh0VG9hc3QoKTogdm9pZCB7XG4gICAgICAgIGxldCB0b2FzdDogSVBpcFRvYXN0O1xuXG4gICAgICAgIGlmICh0aGlzLnRvYXN0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0b2FzdCA9IHRoaXMudG9hc3RzWzBdO1xuICAgICAgICAgICAgdGhpcy50b2FzdHMuc3BsaWNlKDAsIDEpO1xuICAgICAgICAgICAgdGhpcy5zaG93VG9hc3QodG9hc3QpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgIC8vIFNob3cgdG9hc3RcbiAgICAgcHVibGljIHNob3dUb2FzdCh0b2FzdDogSVBpcFRvYXN0KTogdm9pZCB7XG4gICAgICAgIHRoaXMuY3VycmVudFRvYXN0ID0gdG9hc3Q7XG5cbiAgICAgICAgdGhpcy5fJG1kVG9hc3Quc2hvdyh7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3RvYXN0L3RvYXN0Lmh0bWwnLFxuICAgICAgICAgICAgaGlkZURlbGF5OiB0b2FzdC5kdXJhdGlvbiB8fCB0aGlzLlNIT1dfVElNRU9VVCxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYm90dG9tIGxlZnQnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogVG9hc3RDb250cm9sbGVyLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICAgICAgbG9jYWxzOiB7XG4gICAgICAgICAgICAgICAgdG9hc3Q6IHRoaXMuY3VycmVudFRvYXN0LFxuICAgICAgICAgICAgICAgIHNvdW5kczogdGhpcy5zb3VuZHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oIFxuICAgICAgICAgICAgKGFjdGlvbjogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG93VG9hc3RPa1Jlc3VsdChhY3Rpb24pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIChhY3Rpb246IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvd1RvYXN0Q2FuY2VsUmVzdWx0KGFjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzaG93VG9hc3RDYW5jZWxSZXN1bHQoYWN0aW9uOiBzdHJpbmcpOnZvaWQge1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50VG9hc3QuY2FuY2VsQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFRvYXN0LmNhbmNlbENhbGxiYWNrKGFjdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJyZW50VG9hc3QgPSBudWxsO1xuICAgICAgICB0aGlzLnNob3dOZXh0VG9hc3QoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNob3dUb2FzdE9rUmVzdWx0KGFjdGlvbjogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRUb2FzdC5zdWNjZXNzQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFRvYXN0LnN1Y2Nlc3NDYWxsYmFjayhhY3Rpb24pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3VycmVudFRvYXN0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5zaG93TmV4dFRvYXN0KCk7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZFRvYXN0KHRvYXN0KTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRUb2FzdCAmJiB0b2FzdC50eXBlICE9PSAnZXJyb3InKSB7XG4gICAgICAgICAgICB0aGlzLnRvYXN0cy5wdXNoKHRvYXN0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2hvd1RvYXN0KHRvYXN0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmVUb2FzdHModHlwZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGxldCByZXN1bHQ6IGFueVtdID0gW107XG4gICAgICAgIF8uZWFjaCh0aGlzLnRvYXN0cywgKHRvYXN0KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRvYXN0LnR5cGUgfHwgdG9hc3QudHlwZSAhPT0gdHlwZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRvYXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudG9hc3RzID0gXy5jbG9uZURlZXAocmVzdWx0KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVtb3ZlVG9hc3RzQnlJZChpZDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIF8ucmVtb3ZlKHRoaXMudG9hc3RzLCB7aWQ6IGlkfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFRvYXN0QnlJZChpZDogc3RyaW5nKTogSVBpcFRvYXN0IHtcbiAgICAgICAgcmV0dXJuIF8uZmluZCh0aGlzLnRvYXN0cywge2lkOiBpZH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBvblN0YXRlQ2hhbmdlU3VjY2VzcygpIHt9XG5cbiAgICBwdWJsaWMgb25DbGVhclRvYXN0cygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jbGVhclRvYXN0cyhudWxsKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2hvd05vdGlmaWNhdGlvbihtZXNzYWdlOiBzdHJpbmcsIGFjdGlvbnM6IHN0cmluZ1tdLCBzdWNjZXNzQ2FsbGJhY2ssIGNhbmNlbENhbGxiYWNrLCBpZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuYWRkVG9hc3Qoe1xuICAgICAgICAgICAgaWQ6IGlkIHx8IG51bGwsXG4gICAgICAgICAgICB0eXBlOiAnbm90aWZpY2F0aW9uJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgICAgICBhY3Rpb25zOiBhY3Rpb25zIHx8IFsnb2snXSxcbiAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjazogc3VjY2Vzc0NhbGxiYWNrLFxuICAgICAgICAgICAgY2FuY2VsQ2FsbGJhY2s6IGNhbmNlbENhbGxiYWNrLFxuICAgICAgICAgICAgZHVyYXRpb246IHRoaXMuU0hPV19USU1FT1VUX05PVElGSUNBVElPTlNcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIHNob3dNZXNzYWdlKG1lc3NhZ2U6IHN0cmluZywgc3VjY2Vzc0NhbGxiYWNrLCBjYW5jZWxDYWxsYmFjaywgaWQ/OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5hZGRUb2FzdCh7XG4gICAgICAgICAgICBpZDogaWQgfHwgbnVsbCxcbiAgICAgICAgICAgIHR5cGU6ICdtZXNzYWdlJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICAgICAgICBhY3Rpb25zOiBbJ29rJ10sXG4gICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2s6IHN1Y2Nlc3NDYWxsYmFjayxcbiAgICAgICAgICAgIGNhbmNlbENhbGxiYWNrOiBjYW5jZWxDYWxsYmFja1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAgcHVibGljIHNob3dFcnJvcihtZXNzYWdlOiBzdHJpbmcsIHN1Y2Nlc3NDYWxsYmFjaywgY2FuY2VsQ2FsbGJhY2ssIGlkOiBzdHJpbmcsIGVycm9yOiBhbnkpIHtcbiAgICAgICAgdGhpcy5hZGRUb2FzdCh7XG4gICAgICAgICAgICBpZDogaWQgfHwgbnVsbCxcbiAgICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlIHx8ICdVbmtub3duIGVycm9yLicsXG4gICAgICAgICAgICBhY3Rpb25zOiBbJ29rJ10sXG4gICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2s6IHN1Y2Nlc3NDYWxsYmFjayxcbiAgICAgICAgICAgIGNhbmNlbENhbGxiYWNrOiBjYW5jZWxDYWxsYmFja1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaGlkZUFsbFRvYXN0cygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fJG1kVG9hc3QuY2FuY2VsKCk7XG4gICAgICAgIHRoaXMudG9hc3RzID0gW107XG4gICAgfVxuXG4gICAgcHVibGljIGNsZWFyVG9hc3RzKHR5cGU/OiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICAgIC8vIHBpcEFzc2VydC5pc1N0cmluZyh0eXBlLCAncGlwVG9hc3RzLmNsZWFyVG9hc3RzOiB0eXBlIHNob3VsZCBiZSBhIHN0cmluZycpO1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVUb2FzdHModHlwZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl8kbWRUb2FzdC5jYW5jZWwoKTtcbiAgICAgICAgICAgIHRoaXMudG9hc3RzID0gW107XG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuXG4oKCkgPT4ge1xuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZSgncGlwVG9hc3RzJywgWyduZ01hdGVyaWFsJywgJ3BpcENvbnRyb2xzLlRyYW5zbGF0ZSddKVxuICAgICAgICAuc2VydmljZSgncGlwVG9hc3RzJywgVG9hc3RTZXJ2aWNlKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgncGlwQ29udHJvbHMuVGVtcGxhdGVzJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdwaXBDb250cm9scy5UZW1wbGF0ZXMnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ2NvbG9yX3BpY2tlci9jb2xvcl9waWNrZXIuaHRtbCcsXG4gICAgJzx1bCBjbGFzcz1cInBpcC1jb2xvci1waWNrZXIge3t2bS5jbGFzc319XCIgcGlwLXNlbGVjdGVkPVwidm0uY3VycmVudENvbG9ySW5kZXhcIiBwaXAtZW50ZXItc3BhY2UtcHJlc3M9XCJ2bS5lbnRlclNwYWNlUHJlc3MoJGV2ZW50KVwiPjxsaSB0YWJpbmRleD1cIi0xXCIgbmctcmVwZWF0PVwiY29sb3IgaW4gdm0uY29sb3JzIHRyYWNrIGJ5IGNvbG9yXCI+PG1kLWJ1dHRvbiB0YWJpbmRleD1cIi0xXCIgY2xhc3M9XCJtZC1pY29uLWJ1dHRvbiBwaXAtc2VsZWN0YWJsZVwiIG5nLWNsaWNrPVwidm0uc2VsZWN0Q29sb3IoJGluZGV4KVwiIGFyaWEtbGFiZWw9XCJjb2xvclwiIG5nLWRpc2FibGVkPVwidm0uZGlzYWJsZWQoKVwiPjxtZC1pY29uIG5nLXN0eWxlPVwie1xcJ2NvbG9yXFwnOiBjb2xvcn1cIiBtZC1zdmctaWNvbj1cImljb25zOnt7IGNvbG9yID09IHZtLmN1cnJlbnRDb2xvciA/IFxcJ2NpcmNsZVxcJyA6IFxcJ3JhZGlvLW9mZlxcJyB9fVwiPjwvbWQtaWNvbj48L21kLWJ1dHRvbj48L2xpPjwvdWw+Jyk7XG59XSk7XG59KSgpO1xuXG4oZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgncGlwQ29udHJvbHMuVGVtcGxhdGVzJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdwaXBDb250cm9scy5UZW1wbGF0ZXMnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ3BvcG92ZXIvcG9wb3Zlci5odG1sJyxcbiAgICAnPGRpdiBuZy1pZj1cInZtLnRlbXBsYXRlVXJsXCIgY2xhc3M9XCJwaXAtcG9wb3ZlciBmbGV4IGxheW91dC1jb2x1bW5cIiBuZy1jbGljaz1cInZtLm9uUG9wb3ZlckNsaWNrKCRldmVudClcIiBuZy1pbmNsdWRlPVwidm0udGVtcGxhdGVVcmxcIj48L2Rpdj48ZGl2IG5nLWlmPVwidm0udGVtcGxhdGVcIiBjbGFzcz1cInBpcC1wb3BvdmVyXCIgbmctY2xpY2s9XCJ2bS5vblBvcG92ZXJDbGljaygkZXZlbnQpXCI+PC9kaXY+Jyk7XG59XSk7XG59KSgpO1xuXG4oZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgncGlwQ29udHJvbHMuVGVtcGxhdGVzJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdwaXBDb250cm9scy5UZW1wbGF0ZXMnLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ3Byb2dyZXNzL3JvdXRpbmdfcHJvZ3Jlc3MuaHRtbCcsXG4gICAgJzxkaXYgY2xhc3M9XCJwaXAtcm91dGluZy1wcm9ncmVzcyBsYXlvdXQtY29sdW1uIGxheW91dC1hbGlnbi1jZW50ZXItY2VudGVyXCIgbmctc2hvdz1cInZtLnNob3dQcm9ncmVzcygpXCI+PGRpdiBjbGFzcz1cImxvYWRlclwiPjxzdmcgY2xhc3M9XCJjaXJjdWxhclwiIHZpZXdib3g9XCIyNSAyNSA1MCA1MFwiPjxjaXJjbGUgY2xhc3M9XCJwYXRoXCIgY3g9XCI1MFwiIGN5PVwiNTBcIiByPVwiMjBcIiBmaWxsPVwibm9uZVwiIHN0cm9rZS13aWR0aD1cIjJcIiBzdHJva2UtbWl0ZXJsaW1pdD1cIjEwXCI+PC9jaXJjbGU+PC9zdmc+PC9kaXY+PGltZyBzcmM9XCJcIiBoZWlnaHQ9XCI0MFwiIHdpZHRoPVwiNDBcIiBjbGFzcz1cInBpcC1pbWdcIj48bWQtcHJvZ3Jlc3MtY2lyY3VsYXIgbWQtZGlhbWV0ZXI9XCI5NlwiIGNsYXNzPVwiZml4LWllXCI+PC9tZC1wcm9ncmVzcy1jaXJjdWxhcj48L2Rpdj4nKTtcbn1dKTtcbn0pKCk7XG5cbihmdW5jdGlvbihtb2R1bGUpIHtcbnRyeSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdwaXBDb250cm9scy5UZW1wbGF0ZXMnKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ3BpcENvbnRyb2xzLlRlbXBsYXRlcycsIFtdKTtcbn1cbm1vZHVsZS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dCgndG9hc3QvdG9hc3QuaHRtbCcsXG4gICAgJzxtZC10b2FzdCBjbGFzcz1cIm1kLWFjdGlvbiBwaXAtdG9hc3RcIiBuZy1jbGFzcz1cIntcXCdwaXAtZXJyb3JcXCc6IHZtLnRvYXN0LnR5cGU9PVxcJ2Vycm9yXFwnLCBcXCdwaXAtY29sdW1uLXRvYXN0XFwnOiB2bS50b2FzdC5hY3Rpb25zLmxlbmd0aCA+IDEgfHwgdm0uYWN0aW9uTGVuZ2h0ID4gNCwgXFwncGlwLW5vLWFjdGlvbi10b2FzdFxcJzogdm0uYWN0aW9uTGVuZ2h0ID09IDB9XCIgc3R5bGU9XCJoZWlnaHQ6aW5pdGlhbDsgbWF4LWhlaWdodDogaW5pdGlhbDtcIj48c3BhbiBjbGFzcz1cImZsZXgtdmFyIHBpcC10ZXh0XCIgbmctYmluZC1odG1sPVwidm0ubWVzc2FnZVwiPjwvc3Bhbj48ZGl2IGNsYXNzPVwibGF5b3V0LXJvdyBsYXlvdXQtYWxpZ24tZW5kLXN0YXJ0IHBpcC1hY3Rpb25zXCIgbmctaWY9XCJ2bS5hY3Rpb25zLmxlbmd0aCA+IDAgfHwgKHZtLnRvYXN0LnR5cGU9PVxcJ2Vycm9yXFwnICYmIHZtLnRvYXN0LmVycm9yKVwiPjxkaXYgY2xhc3M9XCJmbGV4XCIgbmctaWY9XCJ2bS50b2FzdC5hY3Rpb25zLmxlbmd0aCA+IDFcIj48L2Rpdj48bWQtYnV0dG9uIGNsYXNzPVwiZmxleC1maXhlZCBwaXAtdG9hc3QtYnV0dG9uXCIgbmctaWY9XCJ2bS50b2FzdC50eXBlPT1cXCdlcnJvclxcJyAmJiB2bS50b2FzdC5lcnJvciAmJiB2bS5zaG93RGV0YWlsc1wiIG5nLWNsaWNrPVwidm0ub25EZXRhaWxzKClcIj5EZXRhaWxzPC9tZC1idXR0b24+PG1kLWJ1dHRvbiBjbGFzcz1cImZsZXgtZml4ZWQgcGlwLXRvYXN0LWJ1dHRvblwiIG5nLWNsaWNrPVwidm0ub25BY3Rpb24oYWN0aW9uKVwiIG5nLXJlcGVhdD1cImFjdGlvbiBpbiB2bS5hY3Rpb25zXCIgYXJpYS1sYWJlbD1cInt7OjphY3Rpb258IHRyYW5zbGF0ZX19XCI+e3s6OmFjdGlvbnwgdHJhbnNsYXRlfX08L21kLWJ1dHRvbj48L2Rpdj48L21kLXRvYXN0PicpO1xufV0pO1xufSkoKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGlwLXdlYnVpLWNvbnRyb2xzLWh0bWwubWluLmpzLm1hcFxuIl19"}