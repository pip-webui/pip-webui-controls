{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/color_picker/ColorPicker.ts","src/dependencies/TranslateFilter.ts","src/image_slider/ImageSlider.ts","src/image_slider/ImageSliderService.ts","src/image_slider/SliderButton.ts","src/image_slider/SliderIndicator.ts","src/index.ts","src/markdown/Markdown.ts","src/popover/Popover.ts","src/popover/PopoverService.ts","src/progress/RoutingProgress.ts","src/toast/Toast.ts","src/toast/ToastService.ts","temp/pip-webui-controls-html.min.js"],"names":[],"mappings":"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","file":"pip-webui-controls.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","{\n    interface IColorPickerBindings {\n        [key: string]: any;\n\n        ngDisabled: any;\n        colors: any;\n        currentColor: any;\n        colorChange: any;\n    }\n\n    interface IColorPickerAttributes extends ng.IAttributes {\n        class: string;\n    }\n\n    const ColorPickerBindings: IColorPickerBindings = {\n        ngDisabled: '<?ngDisabled',\n        colors: '<pipColors',\n        currentColor: '=ngModel',\n        colorChange: '&?ngChange'\n    }\n\n    class ColorPickerChanges implements ng.IOnChangesObject, IColorPickerBindings {\n        [key: string]: ng.IChangesObject < any > ;\n\n        colorChange: ng.IChangesObject < () => ng.IPromise < any >> ;\n        currentColor: any;\n\n        ngDisabled: ng.IChangesObject < boolean > ;\n        colors: ng.IChangesObject < string[] > ;\n    }\n\n    const DEFAULT_COLORS = ['purple', 'lightgreen', 'green', 'darkred', 'pink', 'yellow', 'cyan'];\n\n    class ColorPickerController implements IColorPickerBindings {\n        public class: string;\n        public colors: string[];\n        public currentColor: string;\n        public currentColorIndex: number;\n        public ngDisabled: boolean;\n        public colorChange: Function;\n\n        constructor(\n            private $scope: ng.IScope,\n            private $element: JQuery,\n            $attrs: IColorPickerAttributes,\n            private $timeout: ng.ITimeoutService\n        ) { \n            this.class = $attrs.class || ''; \n        }\n\n        public $onChanges(changes: ColorPickerChanges) {\n            this.colors = changes.colors && _.isArray(changes.colors.currentValue) && changes.colors.currentValue.length !== 0 ?\n                changes.colors.currentValue : DEFAULT_COLORS;\n            this.currentColor = this.currentColor || this.colors[0];\n            this.currentColorIndex = this.colors.indexOf(this.currentColor);\n\n            this.ngDisabled = changes.ngDisabled.currentValue;\n        }\n\n        public selectColor(index: number) {\n            if (this.ngDisabled) {\n                return;\n            }\n            this.currentColorIndex = index;\n            this.currentColor = this.colors[this.currentColorIndex];\n            this.$timeout(() => {\n                this.$scope.$apply();\n            });\n\n            if (this.colorChange) {\n                this.colorChange();\n            }\n        };\n\n        public enterSpacePress(event): void {\n            this.selectColor(event.index);\n        };\n\n    }\n\n    const pipColorPicker: ng.IComponentOptions = {\n        bindings: ColorPickerBindings,\n        templateUrl: 'color_picker/ColorPicker.html',\n        controller: ColorPickerController\n    }\n\n    angular\n        .module('pipColorPicker', ['pipControls.Templates'])\n        .component('pipColorPicker', pipColorPicker);\n\n}","{\n    function translateFilter($injector: ng.auto.IInjectorService) {\n        const pipTranslate = $injector.has('pipTranslate') ? $injector.get('pipTranslate') : null;\n\n        return function (key: string) {\n            return pipTranslate ? pipTranslate['translate'](key) || key : key;\n        }\n    }\n\n    angular\n        .module('pipControls.Translate', [])\n        .filter('translate', translateFilter);\n}\n","import { IImageSliderService } from './IImageSliderService';\n\n{\n    class pipImageSliderController implements ng.IController {\n        private _blocks: any[];\n        private _index: number = 0;\n        private _newIndex: number;\n        private _direction: string;\n        private _type: string;\n        private DEFAULT_INTERVAL:number = 4500;\n        private _interval: number | string;\n        private _timePromises;\n        private _throttled: Function;\n\n        public swipeStart: number = 0;\n        public sliderIndex: number;\n        public slideTo: Function;\n        public type: Function;\n        public interval: Function;\n\n        constructor(\n            private $scope: ng.IScope,\n            private $element: JQuery,\n            private $attrs,\n            private $parse: ng.IParseService,\n            private $timeout: angular.ITimeoutService,\n            private $interval: angular.IIntervalService,\n            private pipImageSlider: IImageSliderService\n        ) {\n\n            //this.sliderIndex = $scope['vm']['sliderIndex'];\n            this._type = this.type();\n            this._interval = this.interval();\n            this.slideTo = this.slideToPrivate;\n\n            $element.addClass('pip-image-slider');\n            $element.addClass('pip-animation-' + this._type);\n\n            this.setIndex();\n\n            $timeout(() => {\n                this._blocks = <any>$element.find('.pip-animation-block');\n                if (this._blocks.length > 0) {\n                    $(this._blocks[0]).addClass('pip-show');\n                }\n            });\n\n            this.startInterval();\n\n            this._throttled = _.throttle(() => {\n                pipImageSlider.toBlock(this._type, this._blocks, this._index, this._newIndex, this._direction);\n                this._index = this._newIndex;\n                this.setIndex();\n            }, 700);\n\n            if ($attrs.id) {\n                pipImageSlider.registerSlider($attrs.id, $scope)\n            }\n\n            $scope.$on('$destroy', () => {\n                this.stopInterval();\n                pipImageSlider.removeSlider($attrs.id);\n            });\n\n        }\n\n        public nextBlock() {\n            this.restartInterval();\n            this._newIndex = this._index + 1 === this._blocks.length ? 0 : this._index + 1;\n            this._direction = 'next';\n            this._throttled();\n        }\n\n        public prevBlock() {\n            this.restartInterval();\n            this._newIndex = this._index - 1 < 0 ? this._blocks.length - 1 : this._index - 1;\n            this._direction = 'prev';\n            this._throttled();\n        }\n\n        private slideToPrivate(nextIndex: number) {\n            if (nextIndex === this._index || nextIndex > this._blocks.length - 1) {\n                return;\n            }\n\n            this.restartInterval();\n            this._newIndex = nextIndex;\n            this._direction = nextIndex > this._index ? 'next' : 'prev';\n            this._throttled();\n        }\n\n        private setIndex() {\n            if (this.$attrs.pipImageIndex) this.sliderIndex = this._index;\n        }\n\n        private startInterval() {\n            this._timePromises = this.$interval(() => {\n                this._newIndex = this._index + 1 === this._blocks.length ? 0 : this._index + 1;\n                this._direction = 'next';\n                this._throttled();\n            }, Number(this._interval || this.DEFAULT_INTERVAL));\n        }\n\n        private stopInterval() {\n            this.$interval.cancel(this._timePromises);\n        }\n\n        private restartInterval() {\n            this.stopInterval();\n            this.startInterval();\n        }\n    }\n\n    const ImageSlider = function(): ng.IDirective {\n        return {\n            scope: {\n                sliderIndex: '=pipImageIndex',\n                type: '&pipAnimationType',\n                interval: '&pipAnimationInterval'\n            },\n            bindToController: true,\n            controller: pipImageSliderController,\n            controllerAs: 'vm'\n        };\n    }\n\n    angular\n        .module('pipImageSlider', ['pipSliderButton', 'pipSliderIndicator', 'pipImageSlider.Service'])\n        .directive('pipImageSlider', ImageSlider);\n}","import { IImageSliderService } from './IImageSliderService';\n\n{\n    class ImageSliderService implements IImageSliderService {\n        private ANIMATION_DURATION: number = 550;\n        private _sliders: Object = {};\n\n        constructor(\n            private $timeout: angular.ITimeoutService\n        ) {}\n\n        public registerSlider(sliderId: string, sliderScope: ng.IScope): void {\n            this._sliders[sliderId] = sliderScope;\n        }\n\n        public removeSlider(sliderId: string): void {\n            delete this._sliders[sliderId];\n        }\n\n        public getSliderScope(sliderId: string) {\n            return this._sliders[sliderId];\n        }\n\n        public nextCarousel(nextBlock: JQuery, prevBlock: JQuery): void {\n            nextBlock.addClass('pip-next');\n\n            this.$timeout(() => {\n                nextBlock.addClass('animated').addClass('pip-show').removeClass('pip-next');\n                prevBlock.addClass('animated').removeClass('pip-show');\n            }, 100);\n        }\n\n        public prevCarousel(nextBlock: JQuery, prevBlock: JQuery): void {\n            this.$timeout(() => {\n                nextBlock.addClass('animated').addClass('pip-show');\n                prevBlock.addClass('animated').addClass('pip-next').removeClass('pip-show');\n            }, 100);\n        }\n\n        public toBlock(type: string, blocks: any[], oldIndex: number, nextIndex: number, direction: string): void {\n            const prevBlock = $(blocks[oldIndex]),\n                blockIndex = nextIndex,\n                nextBlock = $(blocks[blockIndex]);\n\n            if (type === 'carousel') {\n                $(blocks).removeClass('pip-next').removeClass('pip-prev').removeClass('animated');\n\n                if (direction && (direction === 'prev' || direction === 'next')) {\n                    if (direction === 'prev') {\n                        this.prevCarousel(nextBlock, prevBlock);\n                    } else {\n                        this.nextCarousel(nextBlock, prevBlock);\n                    }\n                } else {\n                    if (nextIndex && nextIndex < oldIndex) {\n                        this.prevCarousel(nextBlock, prevBlock);\n                    } else {\n                        this.nextCarousel(nextBlock, prevBlock);\n                    }\n                }\n            } else {\n                prevBlock.addClass('animated').removeClass('pip-show');\n                nextBlock.addClass('animated').addClass('pip-show');\n            }\n        }\n    }\n\n    angular\n        .module('pipImageSlider.Service', [])\n        .service('pipImageSlider', ImageSliderService);\n}","import { IImageSliderService } from './IImageSliderService';\n\n{\n    class SliderButtonController implements ng.IController {\n        public direction: Function;\n        public sliderId: Function;\n\n        constructor(\n            $element: JQuery,\n            pipImageSlider: IImageSliderService\n        ) {\n            $element.on('click', () => {\n                if (!this.sliderId() || !this.direction()) {\n                    return;\n                }\n\n                pipImageSlider.getSliderScope(this.sliderId()).vm[this.direction() + 'Block']();\n            });\n        }\n    }\n\n    const SliderButton = function (): ng.IDirective {\n        return {\n            scope: {\n                direction: '&pipButtonType',\n                sliderId: '&pipSliderId'\n            },\n            controllerAs: '$ctlr',\n            bindToController: true,\n            controller: SliderButtonController\n        };\n    }\n\n    angular\n        .module('pipSliderButton', [])\n        .directive('pipSliderButton', SliderButton);\n\n}","import { IImageSliderService } from './IImageSliderService';\n\n{\n    class SliderIndicatorController implements ng.IController {\n        public slideTo: Function;\n        public sliderId: Function;\n\n        constructor(\n            $element: JQuery,\n            pipImageSlider: IImageSliderService\n        ) {\n            $element.css('cursor', 'pointer');\n            $element.on('click', () => {\n                if (!this.sliderId() || this.slideTo() === undefined) {\n                    return;\n                }\n\n                pipImageSlider.getSliderScope(this.sliderId()).vm.slideTo(this.slideTo());\n            });\n        }\n    }\n\n    const SliderIndicator = function (): ng.IDirective {\n        return {\n            scope: {\n                slideTo: '&pipSlideTo',\n                sliderId: '&pipSliderId'\n            },\n            controllerAs: '$ctlr',\n            bindToController: true,\n            controller: SliderIndicatorController\n        }\n    }\n\n    angular\n        .module('pipSliderIndicator', [])\n        .directive('pipSliderIndicator', SliderIndicator);\n}","﻿angular.module('pipControls', [\n    'pipMarkdown',\n    'pipColorPicker',\n    'pipRoutingProgress',\n    'pipPopover',\n    'pipImageSlider',\n    'pipToasts',\n    'pipControls.Translate'\n]);","declare var marked: any;\n\n{\n    function ConfigTranslations($injector: ng.auto.IInjectorService) {\n        const pipTranslate = $injector.has('pipTranslate') ? $injector.get('pipTranslate') : null;\n\n        if (pipTranslate) {\n            (<any>pipTranslate).setTranslations('en', {\n                'MARKDOWN_ATTACHMENTS': 'Attachments:',\n                'checklist': 'Checklist',\n                'documents': 'Documents',\n                'pictures': 'Pictures',\n                'location': 'Location',\n                'time': 'Time'\n            });\n            (<any>pipTranslate).setTranslations('ru', {\n                'MARKDOWN_ATTACHMENTS': 'Вложения:',\n                'checklist': 'Список',\n                'documents': 'Документы',\n                'pictures': 'Изображения',\n                'location': 'Местонахождение',\n                'time': 'Время'\n            });\n        }\n    }\n\n    interface IMarkdownBindings {\n        [key: string]: any;\n\n        text: any;\n        isList: any;\n        clamp: any;\n        rebind: any;\n    }\n\n    const MarkdownBindings: IMarkdownBindings = {\n        text: '<pipText',\n        isList: '<?pipList',\n        clamp: '<?pipLineCount',\n        rebind: '<?pipRebind'\n    }\n\n    class MarkdownChanges implements ng.IOnChangesObject, IMarkdownBindings {\n        [key: string]: ng.IChangesObject < any > ;\n\n        text: ng.IChangesObject < string > ;\n        isList: ng.IChangesObject < boolean > ;\n        clamp: ng.IChangesObject < number | string > ;\n        rebind: ng.IChangesObject < boolean > ;\n    }\n\n    class MarkdownController implements IMarkdownBindings, ng.IController {\n        private _pipTranslate;\n\n        public text: string;\n        public isList: boolean;\n        public clamp: string | number;\n        public rebind: boolean;\n\n        constructor(\n            private $scope: angular.IScope,\n            private $element: JQuery,\n            $injector: ng.auto.IInjectorService\n        ) {\n            this._pipTranslate = $injector.has('pipTranslate') ? $injector.get('pipTranslate') : null;\n        }\n\n        public $postLink() {\n            // Fill the text\n            this.bindText(this.text);\n\n            this.$scope.$on('pipWindowResized', function () {\n                if (this.bindText) this.bindText(this._text(this._$scope));\n            });\n\n            // Add class\n            this.$element.addClass('pip-markdown');\n\n        }\n\n        public $onChanges(changes: MarkdownChanges) {\n            const newText = changes.text.currentValue;\n\n            if (this.rebind) {\n                this.text = newText;\n                this.bindText(this.text);\n            }\n        }\n\n        private describeAttachments(array) {\n            var attachString = '',\n                attachTypes = [];\n\n            _.each(array, function (attach) {\n                if (attach.type && attach.type !== 'text') {\n                    if (attachString.length === 0 && this._pipTranslate) {\n                        attachString = this._pipTranslate.translate('MARKDOWN_ATTACHMENTS');\n                    }\n\n                    if (attachTypes.indexOf(attach.type) < 0) {\n                        attachTypes.push(attach.type);\n                        attachString += attachTypes.length > 1 ? ', ' : ' ';\n                        if (this._pipTranslate)\n                            attachString += this._pipTranslate.translate(attach.type);\n                    }\n                }\n            });\n\n            return attachString;\n        }\n\n        private bindText(value) {\n            let textString, isClamped, height, options, obj;\n\n            if (_.isArray(value)) {\n                obj = _.find(value, function (item: any) {\n                    return item.type === 'text' && item.text;\n                });\n\n                textString = obj ? obj.text : this.describeAttachments(value);\n            } else {\n                textString = value;\n            }\n\n            isClamped = this.clamp && _.isNumber(this.clamp);\n            isClamped = isClamped && textString && textString.length > 0;\n            options = {\n                gfm: true,\n                tables: true,\n                breaks: true,\n                sanitize: true,\n                pedantic: true,\n                smartLists: true,\n                smartypents: false\n            };\n            textString = marked(textString || '', options);\n            if (isClamped) {\n                height = 1.5 * Number(this.clamp);\n            }\n            // Assign value as HTML\n            this.$element.html('<div' + (isClamped ? this.isList ? 'class=\"pip-markdown-content ' +\n                'pip-markdown-list\" style=\"max-height: ' + height + 'em\">' :\n                ' class=\"pip-markdown-content\" style=\"max-height: ' + height + 'em\">' : this.isList ?\n                ' class=\"pip-markdown-list\">' : '>') + textString + '</div>');\n            this.$element.find('a').attr('target', 'blank');\n            if (!this.isList && isClamped) {\n                this.$element.append('<div class=\"pip-gradient-block\"></div>');\n            }\n        }\n    }\n    const MarkdownComponent = {\n        controller: MarkdownController,\n        bindings: MarkdownBindings\n    }\n\n    angular\n        .module('pipMarkdown', ['ngSanitize'])\n        .run(ConfigTranslations)\n        .component('pipMarkdown', MarkdownComponent);\n}","{\n    interface IPopoverBindings {\n        [key: string]: any;\n\n        params: any;\n    }\n\n    const PopoverBindings: IPopoverBindings = {\n        params: '<pipParams'\n    }\n\n    class PopoverController implements IPopoverBindings, ng.IController {\n        private backdropElement;\n        private content;\n        public params: any;\n\n        constructor(\n            private $scope: ng.IScope,\n            $rootScope: ng.IRootScopeService,\n            $element: JQuery,\n            private $timeout: ng.ITimeoutService,\n            private $compile: ng.ICompileService,\n            private $templateRequest: ng.ITemplateRequestService\n        ) {\n            this.backdropElement = $('.pip-popover-backdrop');\n            this.backdropElement.on('click keydown scroll', () => {\n                this.backdropClick();\n            });\n            this.backdropElement.addClass(this.params.responsive !== false ? 'pip-responsive' : '');\n\n            $timeout(() => {\n                this.position();\n                angular.extend($scope, this.params.locals);\n\n                if (this.params.template) {\n                    this.content = $compile(this.params.template)($scope);\n                    $element.find('.pip-popover').append(this.content);\n\n                    this.init();\n                } else {\n                    this.$templateRequest(this.params.templateUrl, false).then((html) => {\n                        this.content = $compile(html)($scope);\n                        $element.find('.pip-popover').append(this.content);\n\n                        this.init();\n                    });\n                }\n            });\n\n            $timeout(() => {\n                this.calcHeight();\n            }, 200);\n            $rootScope.$on('pipPopoverResize', () => {\n                this.onResize()\n            });\n            $(window).resize(() => {\n                this.onResize()\n            });\n        }\n\n        public backdropClick() {\n            if (this.params.cancelCallback) {\n                this.params.cancelCallback();\n            }\n            this.closePopover();\n        }\n\n        public closePopover() {\n            this.backdropElement.removeClass('opened');\n            this.$timeout(() => {\n                this.backdropElement.remove();\n            }, 100);\n        }\n\n        public onPopoverClick(event) {\n            event.stopPropagation();\n        }\n\n        private init() {\n            this.backdropElement.addClass('opened');\n            $('.pip-popover-backdrop').focus();\n            if (this.params.timeout) {\n                this.$timeout(function () {\n                    this.closePopover();\n                }, this.params.timeout);\n            }\n        }\n\n        private position() {\n            if (this.params.element) {\n                let element = $(this.params.element),\n                    pos = element.offset(),\n                    width = element.width(),\n                    height = element.height(),\n                    docWidth = $(document).width(),\n                    docHeight = $(document).height(),\n                    popover = this.backdropElement.find('.pip-popover');\n\n                if (pos) {\n                    popover\n                        .css('max-width', docWidth - (docWidth - pos.left))\n                        .css('max-height', docHeight - (pos.top + height) - 32, 0)\n                        .css('left', pos.left - popover.width() + width / 2)\n                        .css('top', pos.top + height + 16);\n                }\n            }\n        }\n\n        private onResize() {\n            this.backdropElement.find('.pip-popover').find('.pip-content').css('max-height', '100%');\n            this.position();\n            this.calcHeight();\n        }\n\n        private calcHeight() {\n            if (this.params.calcHeight === false) {\n                return;\n            }\n            const popover = this.backdropElement.find('.pip-popover'),\n                title = popover.find('.pip-title'),\n                footer = popover.find('.pip-footer'),\n                content = popover.find('.pip-content'),\n                contentHeight = popover.height() - title.outerHeight(true) - footer.outerHeight(true);\n            content.css('max-height', Math.max(contentHeight, 0) + 'px').css('box-sizing', 'border-box');\n        }\n    }\n\n    const Popover: ng.IComponentOptions = {\n        bindings: PopoverBindings,\n        templateUrl: 'popover/Popover.html',\n        controller: PopoverController\n    }\n\n    angular\n        .module('pipPopover', ['pipPopover.Service'])\n        .component('pipPopover', Popover);\n}","import { IPopoverService } from './IPopoverService';\n\n{\n    interface PopoverTemplateScope extends ng.IScope {\n        params ? : any;\n        locals ? : any;\n    }\n\n    class PopoverService implements IPopoverService {\n        private popoverTemplate: string;\n\n        constructor(\n            private $compile: ng.ICompileService,\n            private $rootScope: ng.IRootScopeService,\n            private $timeout: ng.ITimeoutService\n        ) {\n            this.popoverTemplate = \"<div class='pip-popover-backdrop {{ params.class }}' ng-controller='params.controller'\" +\n                \" tabindex='1'> <pip-popover pip-params='params'> </pip-popover> </div>\";\n        }\n\n        public show(p) {\n            let element: JQuery, scope: PopoverTemplateScope, params: any, content: ng.IRootElementService;\n\n            element = $('body');\n            if (element.find('md-backdrop').length > 0) {\n                return;\n            }\n            this.hide();\n            scope = this.$rootScope.$new();\n            params = p && _.isObject(p) ? p : {};\n            scope.params = params;\n            scope.locals = params.locals;\n            content = this.$compile(this.popoverTemplate)(scope);\n            element.append(content);\n        }\n\n        public hide() {\n            const backdropElement = $('.pip-popover-backdrop');\n            backdropElement.removeClass('opened');\n            this.$timeout(() => {\n                backdropElement.remove();\n            }, 100);\n        }\n\n        public resize() {\n            this.$rootScope.$broadcast('pipPopoverResize');\n        }\n    }\n\n    angular\n        .module('pipPopover.Service', [])\n        .service('pipPopoverService', PopoverService);\n}","{\n    interface IRoutingBindings {\n        [key: string]: any;\n\n        logoUrl: any;\n        showProgress: any;\n    }\n\n    const RoutingBindings: IRoutingBindings = {\n        showProgress: '&',\n        logoUrl: '@'\n    }\n\n    class RoutingController implements ng.IController, IRoutingBindings {\n        private _image: any;\n\n        public logoUrl: string;\n        public showProgress: Function;\n\n        constructor(\n            $scope: ng.IScope,\n            private $element: JQuery\n        ) { }\n\n        public $postLink() {\n            this._image = this.$element.find('img');\n            this.loadProgressImage();\n        }\n\n        public loadProgressImage() {\n            if (this.logoUrl) {\n                this._image.attr('src', this.logoUrl);\n            }\n        }\n    }\n\n    const RoutingProgress: ng.IComponentOptions = {\n        bindings: RoutingBindings,\n        templateUrl: 'progress/RoutingProgress.html',\n        controller: RoutingController\n    }\n\n    angular\n        .module('pipRoutingProgress', ['ngMaterial'])\n        .component('pipRoutingProgress', RoutingProgress);\n}","export class Toast {\n    type: string;\n    id: string;\n    error: any;\n    message: string;\n    actions: string[];\n    duration: number;\n    successCallback: Function;\n    cancelCallback: Function\n}\n","import { Toast } from './Toast';\nimport { IToastService } from './IToastService';\n\n{\n    class ToastController {\n        private _pipErrorDetailsDialog;\n\n        public message: string;\n        public actions: string[];\n        public actionLenght: number;\n        public showDetails: boolean;\n\n        constructor(\n            private $mdToast: angular.material.IToastService,\n            public toast: Toast,\n            $injector: ng.auto.IInjectorService\n        ) {\n            this._pipErrorDetailsDialog = $injector.has('pipErrorDetailsDialog') ?\n                $injector.get('pipErrorDetailsDialog') : null;\n            this.message = toast.message;\n            this.actions = toast.actions;\n\n            if (toast.actions.length === 0) {\n                this.actionLenght = 0;\n            } else {\n                this.actionLenght = toast.actions.length === 1 ? toast.actions[0].toString().length : null;\n            }\n\n            this.showDetails = this._pipErrorDetailsDialog != null;\n        }\n\n        public onDetails(): void {\n            this.$mdToast.hide();\n            if (this._pipErrorDetailsDialog) {\n                this._pipErrorDetailsDialog.show({\n                        error: this.toast.error,\n                        ok: 'Ok'\n                    },\n                    angular.noop,\n                    angular.noop\n                );\n            }\n        }\n\n        public onAction(action): void {\n            this.$mdToast.hide({\n                action: action,\n                id: this.toast.id,\n                message: this.message\n            });\n        }\n    }\n\n    class ToastService implements IToastService {\n        private SHOW_TIMEOUT: number = 20000;\n        private SHOW_TIMEOUT_NOTIFICATIONS: number = 20000;\n        private toasts: Toast[] = [];\n        private currentToast: any;\n        private sounds: any = {};\n\n        constructor(\n            $rootScope: ng.IRootScopeService,\n            private $mdToast: angular.material.IToastService\n        ) {\n            $rootScope.$on('$stateChangeSuccess', () => { this.onStateChangeSuccess() });\n            $rootScope.$on('pipSessionClosed', () => { this.onClearToasts() });\n            $rootScope.$on('pipIdentityChanged', () => { this.onClearToasts() });\n        }\n\n        public showNextToast(): void {\n            let toast: Toast;\n\n            if (this.toasts.length > 0) {\n                toast = this.toasts[0];\n                this.toasts.splice(0, 1);\n                this.showToast(toast);\n            }\n        }\n\n        // Show toast\n        public showToast(toast: Toast): void {\n            this.currentToast = toast;\n\n            this.$mdToast.show({\n                    templateUrl: 'toast/Toast.html',\n                    hideDelay: toast.duration || this.SHOW_TIMEOUT,\n                    position: 'bottom left',\n                    controller: ToastController,\n                    controllerAs: 'vm',\n                    locals: {\n                        toast: this.currentToast,\n                        sounds: this.sounds\n                    }\n                })\n                .then(\n                    (action: string) => {\n                        this.showToastOkResult(action);\n                    },\n                    (action: string) => {\n                        this.showToastCancelResult(action);\n                    }\n                );\n        }\n\n        private showToastCancelResult(action: string): void {\n            if (this.currentToast.cancelCallback) {\n                this.currentToast.cancelCallback(action);\n            }\n            this.currentToast = null;\n            this.showNextToast();\n        }\n\n        private showToastOkResult(action: string): void {\n            if (this.currentToast.successCallback) {\n                this.currentToast.successCallback(action);\n            }\n            this.currentToast = null;\n            this.showNextToast();\n        }\n\n        public addToast(toast): void {\n            if (this.currentToast && toast.type !== 'error') {\n                this.toasts.push(toast);\n            } else {\n                this.showToast(toast);\n            }\n        }\n\n        public removeToasts(type: string): void {\n            const result: any[] = [];\n            _.each(this.toasts, (toast) => {\n                if (!toast.type || toast.type !== type) {\n                    result.push(toast);\n                }\n            });\n            this.toasts = _.cloneDeep(result);\n        }\n\n        public removeToastsById(id: string): void {\n            _.remove(this.toasts, {\n                id: id\n            });\n        }\n\n        public getToastById(id: string): Toast {\n            return _.find(this.toasts, {\n                id: id\n            });\n        }\n\n        public onStateChangeSuccess() {}\n\n        public onClearToasts(): void {\n            this.clearToasts(null);\n        }\n\n        public showNotification(message: string, actions: string[], successCallback, cancelCallback, id: string) {\n            this.addToast({\n                id: id || null,\n                type: 'notification',\n                message: message,\n                actions: actions || ['ok'],\n                successCallback: successCallback,\n                cancelCallback: cancelCallback,\n                duration: this.SHOW_TIMEOUT_NOTIFICATIONS\n            });\n        }\n\n        public showMessage(message: string, successCallback, cancelCallback, id ? : string) {\n            this.addToast({\n                id: id || null,\n                type: 'message',\n                message: message,\n                actions: ['ok'],\n                successCallback: successCallback,\n                cancelCallback: cancelCallback\n            });\n        }\n\n        public showError(message: string, successCallback, cancelCallback, id: string, error: any) {\n            this.addToast({\n                id: id || null,\n                error: error,\n                type: 'error',\n                message: message || 'Unknown error.',\n                actions: ['ok'],\n                successCallback: successCallback,\n                cancelCallback: cancelCallback\n            });\n        }\n\n        public hideAllToasts(): void {\n            this.$mdToast.cancel();\n            this.toasts = [];\n        }\n\n        public clearToasts(type ? : string) {\n            if (type) {\n                // pipAssert.isString(type, 'pipToasts.clearToasts: type should be a string');\n                this.removeToasts(type);\n            } else {\n                this.$mdToast.cancel();\n                this.toasts = [];\n            }\n        }\n\n    }\n\n    angular\n        .module('pipToasts', ['ngMaterial', 'pipControls.Translate'])\n        .service('pipToasts', ToastService);\n}","(function(module) {\ntry {\n  module = angular.module('pipControls.Templates');\n} catch (e) {\n  module = angular.module('pipControls.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('color_picker/ColorPicker.html',\n    '<ul class=\"pip-color-picker {{$ctrl.class}}\" pip-selected=\"$ctrl.currentColorIndex\" pip-enter-space-press=\"$ctrl.enterSpacePress($event)\"><li tabindex=\"-1\" ng-repeat=\"color in $ctrl.colors track by color\"><md-button tabindex=\"-1\" class=\"md-icon-button pip-selectable\" ng-click=\"$ctrl.selectColor($index)\" aria-label=\"color\" ng-disabled=\"$ctrl.ngDisabled\"><md-icon ng-style=\"{\\'color\\': color}\" md-svg-icon=\"icons:{{ color == $ctrl.currentColor ? \\'circle\\' : \\'radio-off\\' }}\"></md-icon></md-button></li></ul>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipControls.Templates');\n} catch (e) {\n  module = angular.module('pipControls.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('popover/Popover.html',\n    '<div class=\"pip-popover\" ng-click=\"$ctrl.params.onPopoverClick($event)\"></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipControls.Templates');\n} catch (e) {\n  module = angular.module('pipControls.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('progress/RoutingProgress.html',\n    '<div class=\"layout-column layout-align-center-center\" ng-show=\"$ctrl.showProgress()\"><div class=\"loader\"><svg class=\"circular\" viewbox=\"25 25 50 50\"><circle class=\"path\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke-width=\"2\" stroke-miterlimit=\"10\"></circle></svg></div><img src=\"\" height=\"40\" width=\"40\" class=\"pip-img\"><md-progress-circular md-diameter=\"96\" class=\"fix-ie\"></md-progress-circular></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipControls.Templates');\n} catch (e) {\n  module = angular.module('pipControls.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('toast/Toast.html',\n    '<md-toast class=\"md-action pip-toast\" ng-class=\"{\\'pip-error\\': vm.toast.type==\\'error\\', \\'pip-column-toast\\': vm.toast.actions.length > 1 || vm.actionLenght > 4, \\'pip-no-action-toast\\': vm.actionLenght == 0}\" style=\"height:initial; max-height: initial;\"><span class=\"flex-var pip-text\" ng-bind-html=\"vm.message\"></span><div class=\"layout-row layout-align-end-start pip-actions\" ng-if=\"vm.actions.length > 0 || (vm.toast.type==\\'error\\' && vm.toast.error)\"><div class=\"flex\" ng-if=\"vm.toast.actions.length > 1\"></div><md-button class=\"flex-fixed pip-toast-button\" ng-if=\"vm.toast.type==\\'error\\' && vm.toast.error && vm.showDetails\" ng-click=\"vm.onDetails()\">Details</md-button><md-button class=\"flex-fixed pip-toast-button\" ng-click=\"vm.onAction(action)\" ng-repeat=\"action in vm.actions\" aria-label=\"{{::action| translate}}\">{{::action| translate}}</md-button></div></md-toast>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-controls-html.min.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}